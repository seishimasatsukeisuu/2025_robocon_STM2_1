
Robocon_stm1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800428c  0800428c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800428c  0800428c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800428c  0800428c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004294  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000200  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb0d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf0  00000000  00000000  00014b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00016840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5e  00000000  00000000  00017570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b94a  00000000  00000000  00017fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001080f  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6f8a  00000000  00000000  00044127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eb0b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003810  00000000  00000000  000eb0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000ee904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800423c 	.word	0x0800423c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800423c 	.word	0x0800423c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fdaa 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fb0c 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 fada 	bl	8000790 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001dc:	f000 f86e 	bl	80002bc <MX_CAN_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8a0 	bl	8000324 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e4:	f000 f956 	bl	8000494 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001e8:	f000 f9ca 	bl	8000580 <MX_TIM3_Init>
  MX_TIM17_Init();
 80001ec:	f000 fa56 	bl	800069c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  // CANスタート
  	HAL_CAN_Start(&hcan);
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <main+0x3c>)
 80001f2:	f000 fef8 	bl	8000fe6 <HAL_CAN_Start>
  	// 割り込み有効
  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001f6:	2102      	movs	r1, #2
 80001f8:	4802      	ldr	r0, [pc, #8]	@ (8000204 <main+0x3c>)
 80001fa:	f000 ff38 	bl	800106e <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	bf00      	nop
 8000200:	e7fd      	b.n	80001fe <main+0x36>
 8000202:	bf00      	nop
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	@ 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 ffe3 	bl	80041e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 031c 	add.w	r3, r7, #28
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]
 800023a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023c:	2302      	movs	r3, #2
 800023e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000244:	2310      	movs	r3, #16
 8000246:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800024c:	2300      	movs	r3, #0
 800024e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000250:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000254:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800025a:	4618      	mov	r0, r3
 800025c:	f001 f99e 	bl	800159c <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000266:	f000 fb23 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 031c 	add.w	r3, r7, #28
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f002 f996 	bl	80025b8 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000292:	f000 fb0d 	bl	80008b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800029a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fb9a 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002ae:	f000 faff 	bl	80008b0 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3758      	adds	r7, #88	@ 0x58
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002c0:	4b16      	ldr	r3, [pc, #88]	@ (800031c <MX_CAN_Init+0x60>)
 80002c2:	4a17      	ldr	r2, [pc, #92]	@ (8000320 <MX_CAN_Init+0x64>)
 80002c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002c6:	4b15      	ldr	r3, [pc, #84]	@ (800031c <MX_CAN_Init+0x60>)
 80002c8:	2210      	movs	r2, #16
 80002ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002cc:	4b13      	ldr	r3, [pc, #76]	@ (800031c <MX_CAN_Init+0x60>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d2:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_CAN_Init+0x60>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_CAN_Init+0x60>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_CAN_Init+0x60>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <MX_CAN_Init+0x60>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_CAN_Init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <MX_CAN_Init+0x60>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_CAN_Init+0x60>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <MX_CAN_Init+0x60>)
 80002fe:	2200      	movs	r2, #0
 8000300:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_CAN_Init+0x60>)
 8000304:	2200      	movs	r2, #0
 8000306:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_CAN_Init+0x60>)
 800030a:	f000 fd71 	bl	8000df0 <HAL_CAN_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000314:	f000 facc 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000028 	.word	0x20000028
 8000320:	40006400 	.word	0x40006400

08000324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09a      	sub	sp, #104	@ 0x68
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000344:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
 8000354:	615a      	str	r2, [r3, #20]
 8000356:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	222c      	movs	r2, #44	@ 0x2c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 ff3f 	bl	80041e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000364:	4b49      	ldr	r3, [pc, #292]	@ (800048c <MX_TIM1_Init+0x168>)
 8000366:	4a4a      	ldr	r2, [pc, #296]	@ (8000490 <MX_TIM1_Init+0x16c>)
 8000368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800036a:	4b48      	ldr	r3, [pc, #288]	@ (800048c <MX_TIM1_Init+0x168>)
 800036c:	223f      	movs	r2, #63	@ 0x3f
 800036e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b46      	ldr	r3, [pc, #280]	@ (800048c <MX_TIM1_Init+0x168>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000376:	4b45      	ldr	r3, [pc, #276]	@ (800048c <MX_TIM1_Init+0x168>)
 8000378:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800037c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037e:	4b43      	ldr	r3, [pc, #268]	@ (800048c <MX_TIM1_Init+0x168>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000384:	4b41      	ldr	r3, [pc, #260]	@ (800048c <MX_TIM1_Init+0x168>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038a:	4b40      	ldr	r3, [pc, #256]	@ (800048c <MX_TIM1_Init+0x168>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000390:	483e      	ldr	r0, [pc, #248]	@ (800048c <MX_TIM1_Init+0x168>)
 8000392:	f002 fc47 	bl	8002c24 <HAL_TIM_Base_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800039c:	f000 fa88 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003aa:	4619      	mov	r1, r3
 80003ac:	4837      	ldr	r0, [pc, #220]	@ (800048c <MX_TIM1_Init+0x168>)
 80003ae:	f002 fe05 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80003b8:	f000 fa7a 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003bc:	4833      	ldr	r0, [pc, #204]	@ (800048c <MX_TIM1_Init+0x168>)
 80003be:	f002 fc88 	bl	8002cd2 <HAL_TIM_PWM_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80003c8:	f000 fa72 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003cc:	2300      	movs	r3, #0
 80003ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003d0:	2300      	movs	r3, #0
 80003d2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003dc:	4619      	mov	r1, r3
 80003de:	482b      	ldr	r0, [pc, #172]	@ (800048c <MX_TIM1_Init+0x168>)
 80003e0:	f003 fa7a 	bl	80038d8 <HAL_TIMEx_MasterConfigSynchronization>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80003ea:	f000 fa61 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ee:	2360      	movs	r3, #96	@ 0x60
 80003f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f6:	2300      	movs	r3, #0
 80003f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003fa:	2300      	movs	r3, #0
 80003fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000402:	2300      	movs	r3, #0
 8000404:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000406:	2300      	movs	r3, #0
 8000408:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800040a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800040e:	2200      	movs	r2, #0
 8000410:	4619      	mov	r1, r3
 8000412:	481e      	ldr	r0, [pc, #120]	@ (800048c <MX_TIM1_Init+0x168>)
 8000414:	f002 fcbe 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800041e:	f000 fa47 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000422:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000426:	2204      	movs	r2, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4818      	ldr	r0, [pc, #96]	@ (800048c <MX_TIM1_Init+0x168>)
 800042c:	f002 fcb2 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000436:	f000 fa3b 	bl	80008b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800044e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000452:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800045c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000460:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4807      	ldr	r0, [pc, #28]	@ (800048c <MX_TIM1_Init+0x168>)
 8000470:	f003 faa0 	bl	80039b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800047a:	f000 fa19 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800047e:	4803      	ldr	r0, [pc, #12]	@ (800048c <MX_TIM1_Init+0x168>)
 8000480:	f000 fade 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 8000484:	bf00      	nop
 8000486:	3768      	adds	r7, #104	@ 0x68
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000050 	.word	0x20000050
 8000490:	40012c00 	.word	0x40012c00

08000494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	@ 0x38
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	f107 031c 	add.w	r3, r7, #28
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c6:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80004ce:	4b2b      	ldr	r3, [pc, #172]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004d0:	223f      	movs	r2, #63	@ 0x3f
 80004d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d4:	4b29      	ldr	r3, [pc, #164]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80004da:	4b28      	ldr	r3, [pc, #160]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004dc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80004e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e2:	4b26      	ldr	r3, [pc, #152]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e8:	4b24      	ldr	r3, [pc, #144]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ee:	4823      	ldr	r0, [pc, #140]	@ (800057c <MX_TIM2_Init+0xe8>)
 80004f0:	f002 fb98 	bl	8002c24 <HAL_TIM_Base_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004fa:	f000 f9d9 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000502:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000504:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000508:	4619      	mov	r1, r3
 800050a:	481c      	ldr	r0, [pc, #112]	@ (800057c <MX_TIM2_Init+0xe8>)
 800050c:	f002 fd56 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000516:	f000 f9cb 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800051a:	4818      	ldr	r0, [pc, #96]	@ (800057c <MX_TIM2_Init+0xe8>)
 800051c:	f002 fbd9 	bl	8002cd2 <HAL_TIM_PWM_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000526:	f000 f9c3 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	4619      	mov	r1, r3
 8000538:	4810      	ldr	r0, [pc, #64]	@ (800057c <MX_TIM2_Init+0xe8>)
 800053a:	f003 f9cd 	bl	80038d8 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000544:	f000 f9b4 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000548:	2360      	movs	r3, #96	@ 0x60
 800054a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	2204      	movs	r2, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4807      	ldr	r0, [pc, #28]	@ (800057c <MX_TIM2_Init+0xe8>)
 8000560:	f002 fc18 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800056a:	f000 f9a1 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800056e:	4803      	ldr	r0, [pc, #12]	@ (800057c <MX_TIM2_Init+0xe8>)
 8000570:	f000 fa66 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 8000574:	bf00      	nop
 8000576:	3738      	adds	r7, #56	@ 0x38
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000009c 	.word	0x2000009c

08000580 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	@ 0x38
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b2:	4b38      	ldr	r3, [pc, #224]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005b4:	4a38      	ldr	r2, [pc, #224]	@ (8000698 <MX_TIM3_Init+0x118>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80005b8:	4b36      	ldr	r3, [pc, #216]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005ba:	223f      	movs	r2, #63	@ 0x3f
 80005bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b35      	ldr	r3, [pc, #212]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005c6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80005ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005cc:	4b31      	ldr	r3, [pc, #196]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d8:	482e      	ldr	r0, [pc, #184]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005da:	f002 fb23 	bl	8002c24 <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005e4:	f000 f964 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f2:	4619      	mov	r1, r3
 80005f4:	4827      	ldr	r0, [pc, #156]	@ (8000694 <MX_TIM3_Init+0x114>)
 80005f6:	f002 fce1 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000600:	f000 f956 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000604:	4823      	ldr	r0, [pc, #140]	@ (8000694 <MX_TIM3_Init+0x114>)
 8000606:	f002 fb64 	bl	8002cd2 <HAL_TIM_PWM_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000610:	f000 f94e 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	481c      	ldr	r0, [pc, #112]	@ (8000694 <MX_TIM3_Init+0x114>)
 8000624:	f003 f958 	bl	80038d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800062e:	f000 f93f 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2360      	movs	r3, #96	@ 0x60
 8000634:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <MX_TIM3_Init+0x114>)
 800064a:	f002 fba3 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000654:	f000 f92c 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2204      	movs	r2, #4
 800065c:	4619      	mov	r1, r3
 800065e:	480d      	ldr	r0, [pc, #52]	@ (8000694 <MX_TIM3_Init+0x114>)
 8000660:	f002 fb98 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800066a:	f000 f921 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2208      	movs	r2, #8
 8000672:	4619      	mov	r1, r3
 8000674:	4807      	ldr	r0, [pc, #28]	@ (8000694 <MX_TIM3_Init+0x114>)
 8000676:	f002 fb8d 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000680:	f000 f916 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <MX_TIM3_Init+0x114>)
 8000686:	f000 f9db 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 800068a:	bf00      	nop
 800068c:	3738      	adds	r7, #56	@ 0x38
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000e8 	.word	0x200000e8
 8000698:	40000400 	.word	0x40000400

0800069c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b092      	sub	sp, #72	@ 0x48
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	222c      	movs	r2, #44	@ 0x2c
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fd90 	bl	80041e2 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006c2:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006c4:	4a31      	ldr	r2, [pc, #196]	@ (800078c <MX_TIM17_Init+0xf0>)
 80006c6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006ca:	223f      	movs	r2, #63	@ 0x3f
 80006cc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 19999;
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006d6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006da:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80006ee:	4826      	ldr	r0, [pc, #152]	@ (8000788 <MX_TIM17_Init+0xec>)
 80006f0:	f002 fa98 	bl	8002c24 <HAL_TIM_Base_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80006fa:	f000 f8d9 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80006fe:	4822      	ldr	r0, [pc, #136]	@ (8000788 <MX_TIM17_Init+0xec>)
 8000700:	f002 fae7 	bl	8002cd2 <HAL_TIM_PWM_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800070a:	f000 f8d1 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070e:	2360      	movs	r3, #96	@ 0x60
 8000710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800071a:	2300      	movs	r3, #0
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_TIM17_Init+0xec>)
 8000734:	f002 fb2e 	bl	8002d94 <HAL_TIM_PWM_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800073e:	f000 f8b7 	bl	80008b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4807      	ldr	r0, [pc, #28]	@ (8000788 <MX_TIM17_Init+0xec>)
 800076a:	f003 f923 	bl	80039b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000774:	f000 f89c 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000778:	4803      	ldr	r0, [pc, #12]	@ (8000788 <MX_TIM17_Init+0xec>)
 800077a:	f000 f961 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 800077e:	bf00      	nop
 8000780:	3748      	adds	r7, #72	@ 0x48
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000134 	.word	0x20000134
 800078c:	40014800 	.word	0x40014800

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART2_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x58>)
 80007d4:	f003 f966 	bl	8003aa4 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f867 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000180 	.word	0x20000180
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a27      	ldr	r2, [pc, #156]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000828:	6153      	str	r3, [r2, #20]
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <MX_GPIO_Init+0xb8>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR4_Pin|DIR1_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	21a0      	movs	r1, #160	@ 0xa0
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f000 fe89 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|DIR3_Pin|DIR5_Pin|DIR6_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	219a      	movs	r1, #154	@ 0x9a
 800085e:	4813      	ldr	r0, [pc, #76]	@ (80008ac <MX_GPIO_Init+0xbc>)
 8000860:	f000 fe84 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR4_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = DIR4_Pin|DIR1_Pin;
 8000864:	23a0      	movs	r3, #160	@ 0xa0
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087e:	f000 fd03 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR3_Pin DIR5_Pin DIR6_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR3_Pin|DIR5_Pin|DIR6_Pin;
 8000882:	239a      	movs	r3, #154	@ 0x9a
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_GPIO_Init+0xbc>)
 800089a:	f000 fcf5 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x44>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_MspInit+0x44>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <HAL_CAN_MspInit+0x80>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d129      	bne.n	800097a <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <HAL_CAN_MspInit+0x84>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a17      	ldr	r2, [pc, #92]	@ (8000988 <HAL_CAN_MspInit+0x84>)
 800092c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_CAN_MspInit+0x84>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_CAN_MspInit+0x84>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a11      	ldr	r2, [pc, #68]	@ (8000988 <HAL_CAN_MspInit+0x84>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_CAN_MspInit+0x84>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000956:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000968:	2309      	movs	r3, #9
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000976:	f000 fc87 	bl	8001288 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40006400 	.word	0x40006400
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a25      	ldr	r2, [pc, #148]	@ (8000a30 <HAL_TIM_Base_MspInit+0xa4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10c      	bne.n	80009b8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099e:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a24      	ldr	r2, [pc, #144]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80009b6:	e034      	b.n	8000a22 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c0:	d10c      	bne.n	80009dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
}
 80009da:	e022      	b.n	8000a22 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <HAL_TIM_Base_MspInit+0xac>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10c      	bne.n	8000a00 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	e010      	b.n	8000a22 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <HAL_TIM_Base_MspInit+0xb0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a09      	ldr	r2, [pc, #36]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <HAL_TIM_Base_MspInit+0xa8>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
}
 8000a22:	bf00      	nop
 8000a24:	371c      	adds	r7, #28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40000400 	.word	0x40000400
 8000a3c:	40014800 	.word	0x40014800

08000a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a54      	ldr	r2, [pc, #336]	@ (8000bb0 <HAL_TIM_MspPostInit+0x170>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d11e      	bne.n	8000aa0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b54      	ldr	r3, [pc, #336]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a53      	ldr	r2, [pc, #332]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b51      	ldr	r3, [pc, #324]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWMtest_Pin|PWM5_Pin;
 8000a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a8c:	2306      	movs	r3, #6
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f000 fbf5 	bl	8001288 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000a9e:	e082      	b.n	8000ba6 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa8:	d11d      	bne.n	8000ae6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b42      	ldr	r3, [pc, #264]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a41      	ldr	r2, [pc, #260]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM3_Pin;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM3_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f000 fbd2 	bl	8001288 <HAL_GPIO_Init>
}
 8000ae4:	e05f      	b.n	8000ba6 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM3)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a33      	ldr	r2, [pc, #204]	@ (8000bb8 <HAL_TIM_MspPostInit+0x178>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d139      	bne.n	8000b64 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afa:	6153      	str	r3, [r2, #20]
 8000afc:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a29      	ldr	r2, [pc, #164]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b12:	6153      	str	r3, [r2, #20]
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM4_Pin|PWM1_Pin;
 8000b20:	2350      	movs	r3, #80	@ 0x50
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3e:	f000 fba3 	bl	8001288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_Pin;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4817      	ldr	r0, [pc, #92]	@ (8000bbc <HAL_TIM_MspPostInit+0x17c>)
 8000b5e:	f000 fb93 	bl	8001288 <HAL_GPIO_Init>
}
 8000b62:	e020      	b.n	8000ba6 <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM17)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <HAL_TIM_MspPostInit+0x180>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d11b      	bne.n	8000ba6 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_TIM_MspPostInit+0x174>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM6_Pin;
 8000b86:	2320      	movs	r3, #32
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000b96:	230a      	movs	r3, #10
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM6_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <HAL_TIM_MspPostInit+0x17c>)
 8000ba2:	f000 fb71 	bl	8001288 <HAL_GPIO_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	3730      	adds	r7, #48	@ 0x30
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	40014800 	.word	0x40014800

08000bc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <HAL_UART_MspInit+0x80>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d129      	bne.n	8000c3a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_UART_MspInit+0x84>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c16:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f000 fb27 	bl	8001288 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f885 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f003 fa79 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fa61 	bl	80001c8 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d08:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d14:	08004294 	.word	0x08004294
  ldr r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d1c:	2000020c 	.word	0x2000020c

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_Init+0x28>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_Init+0x28>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 fa73 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fdbc 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fa7d 	bl	800126e <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 fa53 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	@ (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000208 	.word	0x20000208

08000dd8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000208 	.word	0x20000208

08000df0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0ed      	b.n	8000fde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fd78 	bl	8000904 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e24:	f7ff ffd8 	bl	8000dd8 <HAL_GetTick>
 8000e28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e2a:	e012      	b.n	8000e52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e2c:	f7ff ffd4 	bl	8000dd8 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b0a      	cmp	r3, #10
 8000e38:	d90b      	bls.n	8000e52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2205      	movs	r2, #5
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0c5      	b.n	8000fde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0e5      	beq.n	8000e2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0202 	bic.w	r2, r2, #2
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e70:	f7ff ffb2 	bl	8000dd8 <HAL_GetTick>
 8000e74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e76:	e012      	b.n	8000e9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e78:	f7ff ffae 	bl	8000dd8 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b0a      	cmp	r3, #10
 8000e84:	d90b      	bls.n	8000e9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2205      	movs	r2, #5
 8000e96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e09f      	b.n	8000fde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e5      	bne.n	8000e78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7e1b      	ldrb	r3, [r3, #24]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e007      	b.n	8000ed6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7e5b      	ldrb	r3, [r3, #25]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d108      	bne.n	8000ef0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e007      	b.n	8000f00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e9b      	ldrb	r3, [r3, #26]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e007      	b.n	8000f2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0220 	bic.w	r2, r2, #32
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7edb      	ldrb	r3, [r3, #27]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0210 	bic.w	r2, r2, #16
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0210 	orr.w	r2, r2, #16
 8000f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7f1b      	ldrb	r3, [r3, #28]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d108      	bne.n	8000f6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0208 	orr.w	r2, r2, #8
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0208 	bic.w	r2, r2, #8
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7f5b      	ldrb	r3, [r3, #29]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0204 	orr.w	r2, r2, #4
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0204 	bic.w	r2, r2, #4
 8000fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	ea42 0103 	orr.w	r1, r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d12e      	bne.n	8001058 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001012:	f7ff fee1 	bl	8000dd8 <HAL_GetTick>
 8001016:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001018:	e012      	b.n	8001040 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800101a:	f7ff fedd 	bl	8000dd8 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d90b      	bls.n	8001040 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e012      	b.n	8001066 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e5      	bne.n	800101a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	e006      	b.n	8001066 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d002      	beq.n	800108c <HAL_CAN_ActivateNotification+0x1e>
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d109      	bne.n	80010a0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6959      	ldr	r1, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e006      	b.n	80010ae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	@ (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	@ (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff47 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff5c 	bl	8001104 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	e14e      	b.n	8001536 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8140 	beq.w	8001530 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d005      	beq.n	80012c8 <HAL_GPIO_Init+0x40>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d017      	beq.n	8001366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d123      	bne.n	80013ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	6939      	ldr	r1, [r7, #16]
 80013b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0203 	and.w	r2, r3, #3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 809a 	beq.w	8001530 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a54      	ldr	r2, [pc, #336]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <HAL_GPIO_Init+0x2cc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001414:	4a50      	ldr	r2, [pc, #320]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1e0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a46      	ldr	r2, [pc, #280]	@ (800155c <HAL_GPIO_Init+0x2d4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1dc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a45      	ldr	r2, [pc, #276]	@ (8001560 <HAL_GPIO_Init+0x2d8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1d8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a44      	ldr	r2, [pc, #272]	@ (8001564 <HAL_GPIO_Init+0x2dc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1d4>
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 800145c:	2305      	movs	r3, #5
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1e2>
 8001468:	2300      	movs	r3, #0
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147a:	4937      	ldr	r1, [pc, #220]	@ (8001558 <HAL_GPIO_Init+0x2d0>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001488:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014d6:	4a24      	ldr	r2, [pc, #144]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001500:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800152a:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_GPIO_Init+0x2e0>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	f47f aea9 	bne.w	8001298 <HAL_GPIO_Init+0x10>
  }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	48000400 	.word	0x48000400
 8001560:	48000800 	.word	0x48000800
 8001564:	48000c00 	.word	0x48000c00
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001588:	e002      	b.n	8001590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	f000 bff4 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 816d 	beq.w	80018b2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015d8:	4bb4      	ldr	r3, [pc, #720]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d00c      	beq.n	80015fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e4:	4bb1      	ldr	r3, [pc, #708]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d157      	bne.n	80016a0 <HAL_RCC_OscConfig+0x104>
 80015f0:	4bae      	ldr	r3, [pc, #696]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015fc:	d150      	bne.n	80016a0 <HAL_RCC_OscConfig+0x104>
 80015fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001602:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001612:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b3f      	cmp	r3, #63	@ 0x3f
 800161e:	d802      	bhi.n	8001626 <HAL_RCC_OscConfig+0x8a>
 8001620:	4ba2      	ldr	r3, [pc, #648]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0xb6>
 8001626:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800162a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800163a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800163e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001642:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800164e:	4b97      	ldr	r3, [pc, #604]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001656:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800165a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800165e:	fa92 f2a2 	rbit	r2, r2
 8001662:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001666:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800166a:	fab2 f282 	clz	r2, r2
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f042 0220 	orr.w	r2, r2, #32
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f002 021f 	and.w	r2, r2, #31
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8114 	beq.w	80018b0 <HAL_RCC_OscConfig+0x314>
 8001688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 810b 	bne.w	80018b0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f000 bf85 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x124>
 80016b2:	4b7e      	ldr	r3, [pc, #504]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7d      	ldr	r2, [pc, #500]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e036      	b.n	800172e <HAL_RCC_OscConfig+0x192>
 80016c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x14e>
 80016d0:	4b76      	ldr	r3, [pc, #472]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a75      	ldr	r2, [pc, #468]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b73      	ldr	r3, [pc, #460]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a72      	ldr	r2, [pc, #456]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e021      	b.n	800172e <HAL_RCC_OscConfig+0x192>
 80016ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x17a>
 80016fc:	4b6b      	ldr	r3, [pc, #428]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6a      	ldr	r2, [pc, #424]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001702:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a67      	ldr	r2, [pc, #412]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x192>
 8001716:	4b65      	ldr	r3, [pc, #404]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a64      	ldr	r2, [pc, #400]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b62      	ldr	r3, [pc, #392]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a61      	ldr	r2, [pc, #388]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001728:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172e:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	f023 020f 	bic.w	r2, r3, #15
 8001736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	495a      	ldr	r1, [pc, #360]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001744:	4313      	orrs	r3, r2
 8001746:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d054      	beq.n	8001802 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb3e 	bl	8000dd8 <HAL_GetTick>
 800175c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001762:	f7ff fb39 	bl	8000dd8 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d902      	bls.n	8001778 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	f000 bf19 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
 8001778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800178c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b3f      	cmp	r3, #63	@ 0x3f
 8001798:	d802      	bhi.n	80017a0 <HAL_RCC_OscConfig+0x204>
 800179a:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	e015      	b.n	80017cc <HAL_RCC_OscConfig+0x230>
 80017a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017a4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80017b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017b8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80017bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80017c8:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017d0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80017d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80017d8:	fa92 f2a2 	rbit	r2, r2
 80017dc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80017e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0220 	orr.w	r2, r2, #32
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0b0      	beq.n	8001762 <HAL_RCC_OscConfig+0x1c6>
 8001800:	e057      	b.n	80018b2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fae9 	bl	8000dd8 <HAL_GetTick>
 8001806:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fae4 	bl	8000dd8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	@ 0x64
 800181a:	d902      	bls.n	8001822 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	f000 bec4 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
 8001822:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001826:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001836:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b3f      	cmp	r3, #63	@ 0x3f
 8001842:	d802      	bhi.n	800184a <HAL_RCC_OscConfig+0x2ae>
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x2da>
 800184a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800184e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800185e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001862:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001866:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_RCC_OscConfig+0x310>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800187a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800187e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001882:	fa92 f2a2 	rbit	r2, r2
 8001886:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800188a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800188e:	fab2 f282 	clz	r2, r2
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f042 0220 	orr.w	r2, r2, #32
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f002 021f 	and.w	r2, r2, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1b0      	bne.n	800180c <HAL_RCC_OscConfig+0x270>
 80018aa:	e002      	b.n	80018b2 <HAL_RCC_OscConfig+0x316>
 80018ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 816c 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c8:	4bcc      	ldr	r3, [pc, #816]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018d4:	4bc9      	ldr	r3, [pc, #804]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d16d      	bne.n	80019bc <HAL_RCC_OscConfig+0x420>
 80018e0:	4bc6      	ldr	r3, [pc, #792]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d167      	bne.n	80019bc <HAL_RCC_OscConfig+0x420>
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80018fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b3f      	cmp	r3, #63	@ 0x3f
 800190a:	d802      	bhi.n	8001912 <HAL_RCC_OscConfig+0x376>
 800190c:	4bbb      	ldr	r3, [pc, #748]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	e013      	b.n	800193a <HAL_RCC_OscConfig+0x39e>
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800192a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001936:	4bb1      	ldr	r3, [pc, #708]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	2202      	movs	r2, #2
 800193c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001940:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001944:	fa92 f2a2 	rbit	r2, r2
 8001948:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800194c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001950:	fab2 f282 	clz	r2, r2
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f042 0220 	orr.w	r2, r2, #32
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f002 021f 	and.w	r2, r2, #31
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <HAL_RCC_OscConfig+0x3e6>
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d002      	beq.n	8001982 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	f000 be14 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b9e      	ldr	r3, [pc, #632]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	21f8      	movs	r1, #248	@ 0xf8
 8001998:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80019a0:	fa91 f1a1 	rbit	r1, r1
 80019a4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80019a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80019ac:	fab1 f181 	clz	r1, r1
 80019b0:	b2c9      	uxtb	r1, r1
 80019b2:	408b      	lsls	r3, r1
 80019b4:	4991      	ldr	r1, [pc, #580]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e0f1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8083 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x538>
 80019ce:	2301      	movs	r3, #1
 80019d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80019e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	461a      	mov	r2, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f9ed 	bl	8000dd8 <HAL_GetTick>
 80019fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff f9e8 	bl	8000dd8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d902      	bls.n	8001a1a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f000 bdc8 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001a2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a38:	d802      	bhi.n	8001a40 <HAL_RCC_OscConfig+0x4a4>
 8001a3a:	4b70      	ldr	r3, [pc, #448]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	e013      	b.n	8001a68 <HAL_RCC_OscConfig+0x4cc>
 8001a40:	2302      	movs	r3, #2
 8001a42:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001a58:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001a64:	4b65      	ldr	r3, [pc, #404]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001a6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001a72:	fa92 f2a2 	rbit	r2, r2
 8001a76:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001a7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0b4      	beq.n	8001a04 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b58      	ldr	r3, [pc, #352]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	21f8      	movs	r1, #248	@ 0xf8
 8001ab0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ab8:	fa91 f1a1 	rbit	r1, r1
 8001abc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ac0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ac4:	fab1 f181 	clz	r1, r1
 8001ac8:	b2c9      	uxtb	r1, r1
 8001aca:	408b      	lsls	r3, r1
 8001acc:	494b      	ldr	r1, [pc, #300]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
 8001ad2:	e065      	b.n	8001ba0 <HAL_RCC_OscConfig+0x604>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001af4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	461a      	mov	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff f96a 	bl	8000dd8 <HAL_GetTick>
 8001b04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f965 	bl	8000dd8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d902      	bls.n	8001b20 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f000 bd45 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b3e:	d802      	bhi.n	8001b46 <HAL_RCC_OscConfig+0x5aa>
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e013      	b.n	8001b6e <HAL_RCC_OscConfig+0x5d2>
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001b6a:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_RCC_OscConfig+0x660>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001b74:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001b80:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1b4      	bne.n	8001b0a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8115 	beq.w	8001de0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d07e      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x728>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_RCC_OscConfig+0x664>)
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	461a      	mov	r2, r3
 8001bec:	2301      	movs	r3, #1
 8001bee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f8f2 	bl	8000dd8 <HAL_GetTick>
 8001bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	e00f      	b.n	8001c1a <HAL_RCC_OscConfig+0x67e>
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff f8e8 	bl	8000dd8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d902      	bls.n	8001c1a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f000 bcc8 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c34:	2202      	movs	r2, #2
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c58:	2202      	movs	r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c74:	4bb0      	ldr	r3, [pc, #704]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c80:	2102      	movs	r1, #2
 8001c82:	6019      	str	r1, [r3, #0]
 8001c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f1a3 	rbit	r1, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c9a:	6019      	str	r1, [r3, #0]
  return result;
 8001c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0a0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x668>
 8001cc2:	e08d      	b.n	8001de0 <HAL_RCC_OscConfig+0x844>
 8001cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cf0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b90      	ldr	r3, [pc, #576]	@ (8001f3c <HAL_RCC_OscConfig+0x9a0>)
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	461a      	mov	r2, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff f867 	bl	8000dd8 <HAL_GetTick>
 8001d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff f862 	bl	8000dd8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d902      	bls.n	8001d26 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	f000 bc42 	b.w	80025aa <HAL_RCC_OscConfig+0x100e>
 8001d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d36:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	4b69      	ldr	r3, [pc, #420]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d9e:	2102      	movs	r1, #2
 8001da0:	6019      	str	r1, [r3, #0]
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f1a3 	rbit	r1, r3
 8001db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001db8:	6019      	str	r1, [r3, #0]
  return result;
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d197      	bne.n	8001d10 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 819e 	beq.w	8002132 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	61d3      	str	r3, [r2, #28]
 8001e14:	4b48      	ldr	r3, [pc, #288]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b42      	ldr	r3, [pc, #264]	@ (8001f40 <HAL_RCC_OscConfig+0x9a4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d11a      	bne.n	8001e78 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e42:	4b3f      	ldr	r3, [pc, #252]	@ (8001f40 <HAL_RCC_OscConfig+0x9a4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a3e      	ldr	r2, [pc, #248]	@ (8001f40 <HAL_RCC_OscConfig+0x9a4>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ffc3 	bl	8000dd8 <HAL_GetTick>
 8001e52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	e009      	b.n	8001e6c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7fe ffbe 	bl	8000dd8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	@ 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e39e      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_RCC_OscConfig+0x9a4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ef      	beq.n	8001e58 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x8fa>
 8001e88:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e035      	b.n	8001f02 <HAL_RCC_OscConfig+0x966>
 8001e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x924>
 8001ea6:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a20      	ldr	r2, [pc, #128]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	e020      	b.n	8001f02 <HAL_RCC_OscConfig+0x966>
 8001ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x94e>
 8001ed0:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x966>
 8001eea:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	@ (8001f38 <HAL_RCC_OscConfig+0x99c>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff60 	bl	8000dd8 <HAL_GetTick>
 8001f18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e012      	b.n	8001f44 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe ff5b 	bl	8000dd8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e339      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	10908120 	.word	0x10908120
 8001f40:	40007000 	.word	0x40007000
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f70:	2202      	movs	r2, #2
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f8a:	601a      	str	r2, [r3, #0]
  return result;
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0xa10>
 8001fa6:	4b98      	ldr	r3, [pc, #608]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0xa38>
 8001fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4b8d      	ldr	r3, [pc, #564]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fd8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001fdc:	2102      	movs	r1, #2
 8001fde:	6011      	str	r1, [r2, #0]
 8001fe0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fe4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	fa92 f1a2 	rbit	r1, r2
 8001fee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ff2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ff6:	6011      	str	r1, [r2, #0]
  return result;
 8001ff8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ffc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	f43f af7f 	beq.w	8001f1e <HAL_RCC_OscConfig+0x982>
 8002020:	e07d      	b.n	800211e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe fed9 	bl	8000dd8 <HAL_GetTick>
 8002026:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe fed4 	bl	8000dd8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e2b2      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
 8002044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002048:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800204c:	2202      	movs	r2, #2
 800204e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002062:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002086:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800208a:	601a      	str	r2, [r3, #0]
  return result;
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002094:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_OscConfig+0xb10>
 80020a6:	4b58      	ldr	r3, [pc, #352]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	e013      	b.n	80020d4 <HAL_RCC_OscConfig+0xb38>
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020d8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80020dc:	2102      	movs	r1, #2
 80020de:	6011      	str	r1, [r2, #0]
 80020e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020e4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	fa92 f1a2 	rbit	r1, r2
 80020ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020f2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80020fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d186      	bne.n	800202c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800211e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a37      	ldr	r2, [pc, #220]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8232 	beq.w	80025a8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002144:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	f000 8201 	beq.w	8002554 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002156:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b02      	cmp	r3, #2
 8002160:	f040 8157 	bne.w	8002412 <HAL_RCC_OscConfig+0xe76>
 8002164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002168:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800216c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002192:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800219e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	461a      	mov	r2, r3
 80021a6:	2300      	movs	r3, #0
 80021a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fe15 	bl	8000dd8 <HAL_GetTick>
 80021ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fe10 	bl	8000dd8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1f0      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80021d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80021ec:	601a      	str	r2, [r3, #0]
  return result;
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80021f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002200:	d804      	bhi.n	800220c <HAL_RCC_OscConfig+0xc70>
 8002202:	4b01      	ldr	r3, [pc, #4]	@ (8002208 <HAL_RCC_OscConfig+0xc6c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	e029      	b.n	800225c <HAL_RCC_OscConfig+0xcc0>
 8002208:	40021000 	.word	0x40021000
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002214:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	fa93 f2a3 	rbit	r2, r3
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002236:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800223a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	4bc3      	ldr	r3, [pc, #780]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002260:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002264:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800226e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	fa92 f1a2 	rbit	r1, r2
 8002278:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800227c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002280:	6011      	str	r1, [r2, #0]
  return result;
 8002282:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002286:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f042 0220 	orr.w	r2, r2, #32
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f002 021f 	and.w	r2, r2, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d185      	bne.n	80021b4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a8:	4baf      	ldr	r3, [pc, #700]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	49a7      	ldr	r1, [pc, #668]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80022d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80022f4:	601a      	str	r2, [r3, #0]
  return result;
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80022fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800230a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	461a      	mov	r2, r3
 8002312:	2301      	movs	r3, #1
 8002314:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fd5f 	bl	8000dd8 <HAL_GetTick>
 800231a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800231e:	e009      	b.n	8002334 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fd5a 	bl	8000dd8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e13a      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800233c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002358:	601a      	str	r2, [r3, #0]
  return result;
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002362:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b3f      	cmp	r3, #63	@ 0x3f
 800236c:	d802      	bhi.n	8002374 <HAL_RCC_OscConfig+0xdd8>
 800236e:	4b7e      	ldr	r3, [pc, #504]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	e027      	b.n	80023c4 <HAL_RCC_OscConfig+0xe28>
 8002374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002378:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800237c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80023a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	4b69      	ldr	r3, [pc, #420]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023c8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80023cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	fa92 f1a2 	rbit	r1, r2
 80023e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80023e8:	6011      	str	r1, [r2, #0]
  return result;
 80023ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ee:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fab2 f282 	clz	r2, r2
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f042 0220 	orr.w	r2, r2, #32
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f002 021f 	and.w	r2, r2, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d087      	beq.n	8002320 <HAL_RCC_OscConfig+0xd84>
 8002410:	e0ca      	b.n	80025a8 <HAL_RCC_OscConfig+0x100c>
 8002412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002416:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800241a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002424:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002436:	601a      	str	r2, [r3, #0]
  return result;
 8002438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002440:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800244c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	461a      	mov	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fcbe 	bl	8000dd8 <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	e009      	b.n	8002476 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fcb9 	bl	8000dd8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e099      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800247e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800249a:	601a      	str	r2, [r3, #0]
  return result;
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80024a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80024ae:	d802      	bhi.n	80024b6 <HAL_RCC_OscConfig+0xf1a>
 80024b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e027      	b.n	8002506 <HAL_RCC_OscConfig+0xf6a>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80024be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80024e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_RCC_OscConfig+0xfcc>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800250a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800250e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002512:	6011      	str	r1, [r2, #0]
 8002514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002518:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	fa92 f1a2 	rbit	r1, r2
 8002522:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002526:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800252a:	6011      	str	r1, [r2, #0]
  return result;
 800252c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002530:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	fab2 f282 	clz	r2, r2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f002 021f 	and.w	r2, r2, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d187      	bne.n	8002462 <HAL_RCC_OscConfig+0xec6>
 8002552:	e029      	b.n	80025a8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d103      	bne.n	800256c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e020      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
 8002568:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_RCC_OscConfig+0x1018>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002574:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002578:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002590:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002598:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09e      	sub	sp, #120	@ 0x78
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e154      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b89      	ldr	r3, [pc, #548]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b86      	ldr	r3, [pc, #536]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4984      	ldr	r1, [pc, #528]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b82      	ldr	r3, [pc, #520]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e13c      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b7b      	ldr	r3, [pc, #492]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4978      	ldr	r1, [pc, #480]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80cd 	beq.w	80027c6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d137      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xec>
 8002634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002638:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b3f      	cmp	r3, #63	@ 0x3f
 800264c:	d802      	bhi.n	8002654 <HAL_RCC_ClockConfig+0x9c>
 800264e:	4b6b      	ldr	r3, [pc, #428]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e00f      	b.n	8002674 <HAL_RCC_ClockConfig+0xbc>
 8002654:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002658:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	667b      	str	r3, [r7, #100]	@ 0x64
 8002662:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002666:	663b      	str	r3, [r7, #96]	@ 0x60
 8002668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002670:	4b62      	ldr	r3, [pc, #392]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002678:	65ba      	str	r2, [r7, #88]	@ 0x58
 800267a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002682:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d171      	bne.n	8002784 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0ea      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d137      	bne.n	800271c <HAL_RCC_ClockConfig+0x164>
 80026ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026b0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80026ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80026c4:	d802      	bhi.n	80026cc <HAL_RCC_ClockConfig+0x114>
 80026c6:	4b4d      	ldr	r3, [pc, #308]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_ClockConfig+0x134>
 80026cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80026da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026de:	643b      	str	r3, [r7, #64]	@ 0x40
 80026e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e8:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80026f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026f4:	fa92 f2a2 	rbit	r2, r2
 80026f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80026fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026fc:	fab2 f282 	clz	r2, r2
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f042 0220 	orr.w	r2, r2, #32
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f002 021f 	and.w	r2, r2, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d135      	bne.n	8002784 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0ae      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
 800271c:	2302      	movs	r3, #2
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b3f      	cmp	r3, #63	@ 0x3f
 8002732:	d802      	bhi.n	800273a <HAL_RCC_ClockConfig+0x182>
 8002734:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e00d      	b.n	8002756 <HAL_RCC_ClockConfig+0x19e>
 800273a:	2302      	movs	r3, #2
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
 8002746:	2302      	movs	r3, #2
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	2202      	movs	r2, #2
 8002758:	61ba      	str	r2, [r7, #24]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	fa92 f2a2 	rbit	r2, r2
 8002760:	617a      	str	r2, [r7, #20]
  return result;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e07a      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 0203 	bic.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	491a      	ldr	r1, [pc, #104]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002796:	f7fe fb1f 	bl	8000dd8 <HAL_GetTick>
 800279a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279e:	f7fe fb1b 	bl	8000dd8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e062      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_ClockConfig+0x244>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 020c 	and.w	r2, r3, #12
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d1eb      	bne.n	800279e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c6:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d215      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 0207 	bic.w	r2, r3, #7
 80027dc:	4906      	ldr	r1, [pc, #24]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <HAL_RCC_ClockConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d006      	beq.n	8002800 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e041      	b.n	800287a <HAL_RCC_ClockConfig+0x2c2>
 80027f6:	bf00      	nop
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_RCC_ClockConfig+0x2cc>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	491a      	ldr	r1, [pc, #104]	@ (8002884 <HAL_RCC_ClockConfig+0x2cc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_RCC_ClockConfig+0x2cc>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4912      	ldr	r1, [pc, #72]	@ (8002884 <HAL_RCC_ClockConfig+0x2cc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283e:	f000 f829 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_RCC_ClockConfig+0x2cc>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800284c:	22f0      	movs	r2, #240	@ 0xf0
 800284e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	60fa      	str	r2, [r7, #12]
  return result;
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	40d3      	lsrs	r3, r2
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <HAL_RCC_ClockConfig+0x2d0>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	fa21 f303 	lsr.w	r3, r1, r3
 800286a:	4a08      	ldr	r2, [pc, #32]	@ (800288c <HAL_RCC_ClockConfig+0x2d4>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_RCC_ClockConfig+0x2d8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fa6c 	bl	8000d50 <HAL_InitTick>
  
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3778      	adds	r7, #120	@ 0x78
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	08004254 	.word	0x08004254
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x30>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x36>
 80028c2:	e026      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_RCC_GetSysClockFreq+0x98>)
 80028c6:	613b      	str	r3, [r7, #16]
      break;
 80028c8:	e026      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0c9b      	lsrs	r3, r3, #18
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x94>)
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028f0:	4a0e      	ldr	r2, [pc, #56]	@ (800292c <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e004      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	e002      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_RCC_GetSysClockFreq+0x98>)
 8002914:	613b      	str	r3, [r7, #16]
      break;
 8002916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002918:	693b      	ldr	r3, [r7, #16]
}
 800291a:	4618      	mov	r0, r3
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	007a1200 	.word	0x007a1200
 8002930:	0800426c 	.word	0x0800426c
 8002934:	0800427c 	.word	0x0800427c
 8002938:	003d0900 	.word	0x003d0900

0800293c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002940:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <HAL_RCC_GetHCLKFreq+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800295a:	f7ff ffef 	bl	800293c <HAL_RCC_GetHCLKFreq>
 800295e:	4601      	mov	r1, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002968:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800296c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	fa92 f2a2 	rbit	r2, r2
 8002974:	603a      	str	r2, [r7, #0]
  return result;
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	40d3      	lsrs	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	08004264 	.word	0x08004264

08002998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800299e:	f7ff ffcd 	bl	800293c <HAL_RCC_GetHCLKFreq>
 80029a2:	4601      	mov	r1, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80029ac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80029b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	fa92 f2a2 	rbit	r2, r2
 80029b8:	603a      	str	r2, [r7, #0]
  return result;
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	fab2 f282 	clz	r2, r2
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	40d3      	lsrs	r3, r2
 80029c4:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08004264 	.word	0x08004264

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b092      	sub	sp, #72	@ 0x48
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80cb 	beq.w	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a00:	4b85      	ldr	r3, [pc, #532]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10e      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4a81      	ldr	r2, [pc, #516]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	61d3      	str	r3, [r2, #28]
 8002a18:	4b7f      	ldr	r3, [pc, #508]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4b79      	ldr	r3, [pc, #484]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a78      	ldr	r2, [pc, #480]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe f9c9 	bl	8000dd8 <HAL_GetTick>
 8002a46:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe f9c5 	bl	8000dd8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	@ 0x64
 8002a56:	d901      	bls.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0d9      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a68:	4b6b      	ldr	r3, [pc, #428]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07b      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d074      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a86:	4b64      	ldr	r3, [pc, #400]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b54      	ldr	r3, [pc, #336]	@ (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002adc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d043      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe f976 	bl	8000dd8 <HAL_GetTick>
 8002aec:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe f972 	bl	8000dd8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e084      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b06:	2302      	movs	r3, #2
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	2302      	movs	r3, #2
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	61fb      	str	r3, [r7, #28]
  return result;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	e007      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002b36:	2302      	movs	r3, #2
 8002b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	4b35      	ldr	r3, [pc, #212]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	2202      	movs	r2, #2
 8002b48:	613a      	str	r2, [r7, #16]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	fa92 f2a2 	rbit	r2, r2
 8002b50:	60fa      	str	r2, [r7, #12]
  return result;
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f002 021f 	and.w	r2, r2, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0bf      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b70:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4926      	ldr	r1, [pc, #152]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4b23      	ldr	r3, [pc, #140]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	491a      	ldr	r1, [pc, #104]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc0:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	f023 0210 	bic.w	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4912      	ldr	r1, [pc, #72]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	490b      	ldr	r1, [pc, #44]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4903      	ldr	r1, [pc, #12]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3748      	adds	r7, #72	@ 0x48
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	10908100 	.word	0x10908100

08002c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e049      	b.n	8002cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd fe9e 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fa74 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e049      	b.n	8002d78 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f841 	bl	8002d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f000 fa1d 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0ff      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b14      	cmp	r3, #20
 8002dbe:	f200 80f0 	bhi.w	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002fa3 	.word	0x08002fa3
 8002dd0:	08002fa3 	.word	0x08002fa3
 8002dd4:	08002fa3 	.word	0x08002fa3
 8002dd8:	08002e5d 	.word	0x08002e5d
 8002ddc:	08002fa3 	.word	0x08002fa3
 8002de0:	08002fa3 	.word	0x08002fa3
 8002de4:	08002fa3 	.word	0x08002fa3
 8002de8:	08002e9f 	.word	0x08002e9f
 8002dec:	08002fa3 	.word	0x08002fa3
 8002df0:	08002fa3 	.word	0x08002fa3
 8002df4:	08002fa3 	.word	0x08002fa3
 8002df8:	08002edf 	.word	0x08002edf
 8002dfc:	08002fa3 	.word	0x08002fa3
 8002e00:	08002fa3 	.word	0x08002fa3
 8002e04:	08002fa3 	.word	0x08002fa3
 8002e08:	08002f21 	.word	0x08002f21
 8002e0c:	08002fa3 	.word	0x08002fa3
 8002e10:	08002fa3 	.word	0x08002fa3
 8002e14:	08002fa3 	.word	0x08002fa3
 8002e18:	08002f61 	.word	0x08002f61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fa18 	bl	8003258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	619a      	str	r2, [r3, #24]
      break;
 8002e5a:	e0a5      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fa7e 	bl	8003364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6999      	ldr	r1, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	619a      	str	r2, [r3, #24]
      break;
 8002e9c:	e084      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fadd 	bl	8003464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0208 	orr.w	r2, r2, #8
 8002eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0204 	bic.w	r2, r2, #4
 8002ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69d9      	ldr	r1, [r3, #28]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	61da      	str	r2, [r3, #28]
      break;
 8002edc:	e064      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fb3b 	bl	8003560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69d9      	ldr	r1, [r3, #28]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	021a      	lsls	r2, r3, #8
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	61da      	str	r2, [r3, #28]
      break;
 8002f1e:	e043      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb7e 	bl	8003628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f5e:	e023      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fbbc 	bl	80036e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002fa0:	e002      	b.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop

08002fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0b6      	b.n	8003146 <HAL_TIM_ConfigClockSource+0x18a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003014:	d03e      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0xd8>
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800301a:	f200 8087 	bhi.w	800312c <HAL_TIM_ConfigClockSource+0x170>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003022:	f000 8086 	beq.w	8003132 <HAL_TIM_ConfigClockSource+0x176>
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302a:	d87f      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 800302c:	2b70      	cmp	r3, #112	@ 0x70
 800302e:	d01a      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0xaa>
 8003030:	2b70      	cmp	r3, #112	@ 0x70
 8003032:	d87b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 8003034:	2b60      	cmp	r3, #96	@ 0x60
 8003036:	d050      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x11e>
 8003038:	2b60      	cmp	r3, #96	@ 0x60
 800303a:	d877      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 800303c:	2b50      	cmp	r3, #80	@ 0x50
 800303e:	d03c      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xfe>
 8003040:	2b50      	cmp	r3, #80	@ 0x50
 8003042:	d873      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d058      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x13e>
 8003048:	2b40      	cmp	r3, #64	@ 0x40
 800304a:	d86f      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 800304c:	2b30      	cmp	r3, #48	@ 0x30
 800304e:	d064      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x15e>
 8003050:	2b30      	cmp	r3, #48	@ 0x30
 8003052:	d86b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d060      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x15e>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d867      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0x170>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05c      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x15e>
 8003060:	2b10      	cmp	r3, #16
 8003062:	d05a      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x15e>
 8003064:	e062      	b.n	800312c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	f000 fc0f 	bl	8003898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	609a      	str	r2, [r3, #8]
      break;
 8003092:	e04f      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	f000 fbf8 	bl	8003898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b6:	609a      	str	r2, [r3, #8]
      break;
 80030b8:	e03c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 fb6c 	bl	80037a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2150      	movs	r1, #80	@ 0x50
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fbc5 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 80030d8:	e02c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 fb8b 	bl	8003802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2160      	movs	r1, #96	@ 0x60
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fbb5 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e01c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	461a      	mov	r2, r3
 8003108:	f000 fb4c 	bl	80037a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2140      	movs	r1, #64	@ 0x40
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fba5 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003118:	e00c      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f000 fb9c 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 800312a:	e003      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e000      	b.n	8003134 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a38      	ldr	r2, [pc, #224]	@ (8003244 <TIM_Base_SetConfig+0xf4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0x28>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0x28>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a35      	ldr	r2, [pc, #212]	@ (8003248 <TIM_Base_SetConfig+0xf8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d108      	bne.n	800318a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2d      	ldr	r2, [pc, #180]	@ (8003244 <TIM_Base_SetConfig+0xf4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <TIM_Base_SetConfig+0x6a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003198:	d00f      	beq.n	80031ba <TIM_Base_SetConfig+0x6a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <TIM_Base_SetConfig+0xf8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <TIM_Base_SetConfig+0x6a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a29      	ldr	r2, [pc, #164]	@ (800324c <TIM_Base_SetConfig+0xfc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0x6a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a28      	ldr	r2, [pc, #160]	@ (8003250 <TIM_Base_SetConfig+0x100>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0x6a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a27      	ldr	r2, [pc, #156]	@ (8003254 <TIM_Base_SetConfig+0x104>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d108      	bne.n	80031cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <TIM_Base_SetConfig+0xf4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0xc0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a14      	ldr	r2, [pc, #80]	@ (800324c <TIM_Base_SetConfig+0xfc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0xc0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <TIM_Base_SetConfig+0x100>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0xc0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a12      	ldr	r2, [pc, #72]	@ (8003254 <TIM_Base_SetConfig+0x104>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]
  }
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f023 0201 	bic.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f023 0302 	bic.w	r3, r3, #2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a28      	ldr	r2, [pc, #160]	@ (8003354 <TIM_OC1_SetConfig+0xfc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_OC1_SetConfig+0x78>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a27      	ldr	r2, [pc, #156]	@ (8003358 <TIM_OC1_SetConfig+0x100>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_OC1_SetConfig+0x78>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a26      	ldr	r2, [pc, #152]	@ (800335c <TIM_OC1_SetConfig+0x104>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC1_SetConfig+0x78>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a25      	ldr	r2, [pc, #148]	@ (8003360 <TIM_OC1_SetConfig+0x108>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10c      	bne.n	80032ea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0308 	bic.w	r3, r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <TIM_OC1_SetConfig+0xfc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_OC1_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <TIM_OC1_SetConfig+0x100>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_OC1_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a17      	ldr	r2, [pc, #92]	@ (800335c <TIM_OC1_SetConfig+0x104>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_OC1_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a16      	ldr	r2, [pc, #88]	@ (8003360 <TIM_OC1_SetConfig+0x108>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800

08003364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0210 	bic.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a24      	ldr	r2, [pc, #144]	@ (8003454 <TIM_OC2_SetConfig+0xf0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10d      	bne.n	80033e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <TIM_OC2_SetConfig+0xf0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00b      	beq.n	8003404 <TIM_OC2_SetConfig+0xa0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003458 <TIM_OC2_SetConfig+0xf4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <TIM_OC2_SetConfig+0xa0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a19      	ldr	r2, [pc, #100]	@ (800345c <TIM_OC2_SetConfig+0xf8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_OC2_SetConfig+0xa0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <TIM_OC2_SetConfig+0xfc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d113      	bne.n	800342c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800340a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003412:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800

08003464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a23      	ldr	r2, [pc, #140]	@ (8003550 <TIM_OC3_SetConfig+0xec>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <TIM_OC3_SetConfig+0xec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00b      	beq.n	8003502 <TIM_OC3_SetConfig+0x9e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a19      	ldr	r2, [pc, #100]	@ (8003554 <TIM_OC3_SetConfig+0xf0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <TIM_OC3_SetConfig+0x9e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <TIM_OC3_SetConfig+0xf4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC3_SetConfig+0x9e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a17      	ldr	r2, [pc, #92]	@ (800355c <TIM_OC3_SetConfig+0xf8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d113      	bne.n	800352a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800

08003560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <TIM_OC4_SetConfig+0xb8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00b      	beq.n	80035dc <TIM_OC4_SetConfig+0x7c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <TIM_OC4_SetConfig+0xbc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <TIM_OC4_SetConfig+0x7c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a14      	ldr	r2, [pc, #80]	@ (8003620 <TIM_OC4_SetConfig+0xc0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_OC4_SetConfig+0x7c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a13      	ldr	r2, [pc, #76]	@ (8003624 <TIM_OC4_SetConfig+0xc4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d109      	bne.n	80035f0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800366c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a15      	ldr	r2, [pc, #84]	@ (80036d4 <TIM_OC5_SetConfig+0xac>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_OC5_SetConfig+0x72>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a14      	ldr	r2, [pc, #80]	@ (80036d8 <TIM_OC5_SetConfig+0xb0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_OC5_SetConfig+0x72>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a13      	ldr	r2, [pc, #76]	@ (80036dc <TIM_OC5_SetConfig+0xb4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC5_SetConfig+0x72>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <TIM_OC5_SetConfig+0xb8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d109      	bne.n	80036ae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	621a      	str	r2, [r3, #32]
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800372a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <TIM_OC6_SetConfig+0xb0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_OC6_SetConfig+0x74>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <TIM_OC6_SetConfig+0xb4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_OC6_SetConfig+0x74>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a14      	ldr	r2, [pc, #80]	@ (800379c <TIM_OC6_SetConfig+0xb8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC6_SetConfig+0x74>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <TIM_OC6_SetConfig+0xbc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d109      	bne.n	800376c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800375e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	029b      	lsls	r3, r3, #10
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40014000 	.word	0x40014000
 800379c:	40014400 	.word	0x40014400
 80037a0:	40014800 	.word	0x40014800

080037a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f023 030a 	bic.w	r3, r3, #10
 80037e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003802:	b480      	push	{r7}
 8003804:	b087      	sub	sp, #28
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0210 	bic.w	r2, r3, #16
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800382c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	031b      	lsls	r3, r3, #12
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800383e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	f043 0307 	orr.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e054      	b.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a24      	ldr	r2, [pc, #144]	@ (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003920:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a17      	ldr	r2, [pc, #92]	@ (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003958:	d009      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a13      	ldr	r2, [pc, #76]	@ (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10c      	bne.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4313      	orrs	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40014000 	.word	0x40014000

080039b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e060      	b.n	8003a92 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a14      	ldr	r2, [pc, #80]	@ (8003aa0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d115      	bne.n	8003a80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	051b      	lsls	r3, r3, #20
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e040      	b.n	8003b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd f87c 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	@ 0x24
 8003ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f95e 	bl	8003dac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f825 	bl	8003b40 <UART_SetConfig>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e01b      	b.n	8003b38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f9dd 	bl	8003ef0 <UART_CheckIdleState>
 8003b36:	4603      	mov	r3, r0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d94 <UART_SetConfig+0x254>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a78      	ldr	r2, [pc, #480]	@ (8003d98 <UART_SetConfig+0x258>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d120      	bne.n	8003bfe <UART_SetConfig+0xbe>
 8003bbc:	4b77      	ldr	r3, [pc, #476]	@ (8003d9c <UART_SetConfig+0x25c>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d817      	bhi.n	8003bf8 <UART_SetConfig+0xb8>
 8003bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0x90>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003bf3 	.word	0x08003bf3
 8003bdc:	08003be7 	.word	0x08003be7
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e01d      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e01a      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e017      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e014      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e011      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a67      	ldr	r2, [pc, #412]	@ (8003da0 <UART_SetConfig+0x260>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d102      	bne.n	8003c0e <UART_SetConfig+0xce>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e009      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a64      	ldr	r2, [pc, #400]	@ (8003da4 <UART_SetConfig+0x264>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d102      	bne.n	8003c1e <UART_SetConfig+0xde>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e001      	b.n	8003c22 <UART_SetConfig+0xe2>
 8003c1e:	2310      	movs	r3, #16
 8003c20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c2a:	d15a      	bne.n	8003ce2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003c2c:	7ffb      	ldrb	r3, [r7, #31]
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d827      	bhi.n	8003c82 <UART_SetConfig+0x142>
 8003c32:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <UART_SetConfig+0xf8>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c73 	.word	0x08003c73
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7fe fe7a 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8003c60:	61b8      	str	r0, [r7, #24]
        break;
 8003c62:	e013      	b.n	8003c8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7fe fe98 	bl	8002998 <HAL_RCC_GetPCLK2Freq>
 8003c68:	61b8      	str	r0, [r7, #24]
        break;
 8003c6a:	e00f      	b.n	8003c8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8003da8 <UART_SetConfig+0x268>)
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e00c      	b.n	8003c8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe fe0f 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8003c76:	61b8      	str	r0, [r7, #24]
        break;
 8003c78:	e008      	b.n	8003c8c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7e:	61bb      	str	r3, [r7, #24]
        break;
 8003c80:	e004      	b.n	8003c8c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d074      	beq.n	8003d7c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b0f      	cmp	r3, #15
 8003cac:	d916      	bls.n	8003cdc <UART_SetConfig+0x19c>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb4:	d212      	bcs.n	8003cdc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f023 030f 	bic.w	r3, r3, #15
 8003cbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	89fa      	ldrh	r2, [r7, #14]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	e04f      	b.n	8003d7c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	77bb      	strb	r3, [r7, #30]
 8003ce0:	e04c      	b.n	8003d7c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d828      	bhi.n	8003d3a <UART_SetConfig+0x1fa>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0x1b0>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe fe1e 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61b8      	str	r0, [r7, #24]
        break;
 8003d1a:	e013      	b.n	8003d44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fe fe3c 	bl	8002998 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <UART_SetConfig+0x268>)
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e00c      	b.n	8003d44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe fdb3 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8003d2e:	61b8      	str	r0, [r7, #24]
        break;
 8003d30:	e008      	b.n	8003d44 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	61bb      	str	r3, [r7, #24]
        break;
 8003d38:	e004      	b.n	8003d44 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	77bb      	strb	r3, [r7, #30]
        break;
 8003d42:	bf00      	nop
    }

    if (pclk != 0U)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085a      	lsrs	r2, r3, #1
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	441a      	add	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d909      	bls.n	8003d78 <UART_SetConfig+0x238>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6a:	d205      	bcs.n	8003d78 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e001      	b.n	8003d7c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d88:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	efff69f3 	.word	0xefff69f3
 8003d98:	40013800 	.word	0x40013800
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40004400 	.word	0x40004400
 8003da4:	40004800 	.word	0x40004800
 8003da8:	007a1200 	.word	0x007a1200

08003dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eaa:	d10a      	bne.n	8003ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b098      	sub	sp, #96	@ 0x60
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f00:	f7fc ff6a 	bl	8000dd8 <HAL_GetTick>
 8003f04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d12e      	bne.n	8003f72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f88c 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d021      	beq.n	8003f72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e6      	bne.n	8003f2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e062      	b.n	8004038 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d149      	bne.n	8004014 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f856 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03c      	beq.n	8004014 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fec:	61fa      	str	r2, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e011      	b.n	8004038 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3758      	adds	r7, #88	@ 0x58
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	e04f      	b.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d04b      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fc febd 	bl	8000dd8 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e04e      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d037      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b80      	cmp	r3, #128	@ 0x80
 8004086:	d034      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b40      	cmp	r3, #64	@ 0x40
 800408c:	d031      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d110      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2208      	movs	r2, #8
 80040a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f838 	bl	800411a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2208      	movs	r2, #8
 80040ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e029      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040cc:	d111      	bne.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f81e 	bl	800411a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e00f      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	429a      	cmp	r2, r3
 800410e:	d0a0      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800411a:	b480      	push	{r7}
 800411c:	b095      	sub	sp, #84	@ 0x54
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004140:	643b      	str	r3, [r7, #64]	@ 0x40
 8004142:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e6      	bne.n	8004122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	61fb      	str	r3, [r7, #28]
   return(result);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800417a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418c:	2b01      	cmp	r3, #1
 800418e:	d118      	bne.n	80041c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	60bb      	str	r3, [r7, #8]
   return(result);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 0310 	bic.w	r3, r3, #16
 80041a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6979      	ldr	r1, [r7, #20]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	613b      	str	r3, [r7, #16]
   return(result);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e6      	bne.n	8004190 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041d6:	bf00      	nop
 80041d8:	3754      	adds	r7, #84	@ 0x54
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <memset>:
 80041e2:	4402      	add	r2, r0
 80041e4:	4603      	mov	r3, r0
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d100      	bne.n	80041ec <memset+0xa>
 80041ea:	4770      	bx	lr
 80041ec:	f803 1b01 	strb.w	r1, [r3], #1
 80041f0:	e7f9      	b.n	80041e6 <memset+0x4>
	...

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	@ (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	@ (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	@ (8004238 <__libc_init_array+0x44>)
 8004208:	f000 f818 	bl	800423c <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	0800428c 	.word	0x0800428c
 8004230:	0800428c 	.word	0x0800428c
 8004234:	0800428c 	.word	0x0800428c
 8004238:	08004290 	.word	0x08004290

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
