
Servo_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003814  08003814  00004814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800384c  0800384c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800384c  0800384c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800384c  0800384c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800384c  0800384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003850  08003850  00004850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003854  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c84f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b6  00000000  00000000  0001188b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000911  00000000  00000000  00013bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a63c  00000000  00000000  000144d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e320  00000000  00000000  0002eb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0ac5  00000000  00000000  0003ce35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dd8fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b0  00000000  00000000  000dd940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000e09f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037fc 	.word	0x080037fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037fc 	.word	0x080037fc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa6e 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f908 	bl	80003e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8d6 	bl	8000388 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80001dc:	f000 f85c 	bl	8000298 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	480b      	ldr	r0, [pc, #44]	@ (8000210 <main+0x48>)
 80001e4:	f002 f81c 	bl	8002220 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <main+0x48>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80001f0:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 80001f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001f6:	f000 fabf 	bl	8000778 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,2200);
 80001fa:	4b05      	ldr	r3, [pc, #20]	@ (8000210 <main+0x48>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f640 0298 	movw	r2, #2200	@ 0x898
 8000202:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 8000204:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000208:	f000 fab6 	bl	8000778 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,500);
 800020c:	bf00      	nop
 800020e:	e7eb      	b.n	80001e8 <main+0x20>
 8000210:	20000028 	.word	0x20000028

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	@ 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	@ 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fabd 	bl	80037a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000246:	2300      	movs	r3, #0
 8000248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800024e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fd0b 	bl	8000c70 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000260:	f000 f8f2 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fd04 	bl	8001c8c <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028a:	f000 f8dd 	bl	8000448 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	@ 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b08e      	sub	sp, #56	@ 0x38
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ac:	f107 031c 	add.w	r3, r7, #28
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]
 80002c6:	615a      	str	r2, [r3, #20]
 80002c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000384 <MX_TIM3_Init+0xec>)
 80002ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002d2:	223f      	movs	r2, #63	@ 0x3f
 80002d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80002dc:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002de:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80002e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b25      	ldr	r3, [pc, #148]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80002f0:	4823      	ldr	r0, [pc, #140]	@ (8000380 <MX_TIM3_Init+0xe8>)
 80002f2:	f001 fedd 	bl	80020b0 <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80002fc:	f000 f8a4 	bl	8000448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000304:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800030a:	4619      	mov	r1, r3
 800030c:	481c      	ldr	r0, [pc, #112]	@ (8000380 <MX_TIM3_Init+0xe8>)
 800030e:	f002 f987 	bl	8002620 <HAL_TIM_ConfigClockSource>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000318:	f000 f896 	bl	8000448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800031c:	4818      	ldr	r0, [pc, #96]	@ (8000380 <MX_TIM3_Init+0xe8>)
 800031e:	f001 ff1e 	bl	800215e <HAL_TIM_PWM_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000328:	f000 f88e 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000330:	2300      	movs	r3, #0
 8000332:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	4619      	mov	r1, r3
 800033a:	4811      	ldr	r0, [pc, #68]	@ (8000380 <MX_TIM3_Init+0xe8>)
 800033c:	f002 fe24 	bl	8002f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000346:	f000 f87f 	bl	8000448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800034a:	2360      	movs	r3, #96	@ 0x60
 800034c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	4619      	mov	r1, r3
 8000360:	4807      	ldr	r0, [pc, #28]	@ (8000380 <MX_TIM3_Init+0xe8>)
 8000362:	f002 f849 	bl	80023f8 <HAL_TIM_PWM_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800036c:	f000 f86c 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000370:	4803      	ldr	r0, [pc, #12]	@ (8000380 <MX_TIM3_Init+0xe8>)
 8000372:	f000 f8b3 	bl	80004dc <HAL_TIM_MspPostInit>

}
 8000376:	bf00      	nop
 8000378:	3738      	adds	r7, #56	@ 0x38
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000028 	.word	0x20000028
 8000384:	40000400 	.word	0x40000400

08000388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 800038e:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <MX_USART2_UART_Init+0x5c>)
 8000390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000392:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 8000394:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003ae:	220c      	movs	r2, #12
 80003b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_USART2_UART_Init+0x58>)
 80003cc:	f002 fe4a 	bl	8003064 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003d6:	f000 f837 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000074 	.word	0x20000074
 80003e4:	40004400 	.word	0x40004400

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_GPIO_Init+0x5c>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <MX_GPIO_Init+0x5c>)
 80003f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_GPIO_Init+0x5c>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_GPIO_Init+0x5c>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <MX_GPIO_Init+0x5c>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_GPIO_Init+0x5c>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_GPIO_Init+0x5c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <MX_GPIO_Init+0x5c>)
 8000424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_GPIO_Init+0x5c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x44>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <HAL_MspInit+0x44>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <HAL_MspInit+0x44>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a08      	ldr	r2, [pc, #32]	@ (8000498 <HAL_MspInit+0x44>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <HAL_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <HAL_TIM_Base_MspInit+0x38>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10b      	bne.n	80004c6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <HAL_TIM_Base_MspInit+0x3c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <HAL_TIM_Base_MspInit+0x3c>)
 80004b4:	f043 0302 	orr.w	r3, r3, #2
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <HAL_TIM_Base_MspInit+0x3c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40000400 	.word	0x40000400
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a11      	ldr	r2, [pc, #68]	@ (8000540 <HAL_TIM_MspPostInit+0x64>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d11b      	bne.n	8000536 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <HAL_TIM_MspPostInit+0x68>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a10      	ldr	r2, [pc, #64]	@ (8000544 <HAL_TIM_MspPostInit+0x68>)
 8000504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <HAL_TIM_MspPostInit+0x68>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000516:	2310      	movs	r3, #16
 8000518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000526:	2302      	movs	r3, #2
 8000528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <HAL_TIM_MspPostInit+0x6c>)
 8000532:	f000 fa2b 	bl	800098c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40000400 	.word	0x40000400
 8000544:	40021000 	.word	0x40021000
 8000548:	48000400 	.word	0x48000400

0800054c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	@ 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <HAL_UART_MspInit+0x80>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d129      	bne.n	80005c2 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_UART_MspInit+0x84>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <HAL_UART_MspInit+0x84>)
 8000574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_UART_MspInit+0x84>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_UART_MspInit+0x84>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <HAL_UART_MspInit+0x84>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_UART_MspInit+0x84>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800059e:	f248 0304 	movw	r3, #32772	@ 0x8004
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005b0:	2307      	movs	r3, #7
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f000 f9e5 	bl	800098c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	@ 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40004400 	.word	0x40004400
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <NMI_Handler+0x4>

080005dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <MemManage_Handler+0x4>

080005ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 f885 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <SystemInit+0x20>)
 800063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <SystemInit+0x20>)
 8000640:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000658:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000690 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800065c:	f7ff ffea 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	@ (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	@ (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000686:	f003 f895 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800068a:	f7ff fd9d 	bl	80001c8 <main>

0800068e <LoopForever>:

LoopForever:
    b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000690:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800069c:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 80006a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a4:	20000100 	.word	0x20000100

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f931 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f808 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff fec4 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_InitTick+0x54>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_InitTick+0x58>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f93b 	bl	8000972 <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e00e      	b.n	8000724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d80a      	bhi.n	8000722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f000 f911 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <HAL_InitTick+0x5c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	200000fc 	.word	0x200000fc

08000760 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;  
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	200000fc 	.word	0x200000fc

08000778 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000790:	d005      	beq.n	800079e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <HAL_Delay+0x44>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800079e:	bf00      	nop
 80007a0:	f7ff ffde 	bl	8000760 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d8f7      	bhi.n	80007a0 <HAL_Delay+0x28>
  {
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	@ (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	@ (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	@ 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	@ 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff8e 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff47 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff5c 	bl	8000808 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff8e 	bl	8000878 <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5d 	bl	8000824 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb0 	bl	80008e0 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e14e      	b.n	8000c3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8140 	beq.w	8000c34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d005      	beq.n	80009cc <HAL_GPIO_Init+0x40>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d017      	beq.n	8000a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2203      	movs	r2, #3
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d123      	bne.n	8000abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	08da      	lsrs	r2, r3, #3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3208      	adds	r2, #8
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0203 	and.w	r2, r3, #3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 809a 	beq.w	8000c34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b00:	4b55      	ldr	r3, [pc, #340]	@ (8000c58 <HAL_GPIO_Init+0x2cc>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a54      	ldr	r2, [pc, #336]	@ (8000c58 <HAL_GPIO_Init+0x2cc>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b52      	ldr	r3, [pc, #328]	@ (8000c58 <HAL_GPIO_Init+0x2cc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b18:	4a50      	ldr	r2, [pc, #320]	@ (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b42:	d013      	beq.n	8000b6c <HAL_GPIO_Init+0x1e0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a46      	ldr	r2, [pc, #280]	@ (8000c60 <HAL_GPIO_Init+0x2d4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d00d      	beq.n	8000b68 <HAL_GPIO_Init+0x1dc>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a45      	ldr	r2, [pc, #276]	@ (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0x1d8>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a44      	ldr	r2, [pc, #272]	@ (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_GPIO_Init+0x1d4>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x1e2>
 8000b60:	2305      	movs	r3, #5
 8000b62:	e004      	b.n	8000b6e <HAL_GPIO_Init+0x1e2>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e002      	b.n	8000b6e <HAL_GPIO_Init+0x1e2>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <HAL_GPIO_Init+0x1e2>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	f002 0203 	and.w	r2, r2, #3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4093      	lsls	r3, r2
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b7e:	4937      	ldr	r1, [pc, #220]	@ (8000c5c <HAL_GPIO_Init+0x2d0>)
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3302      	adds	r3, #2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b8c:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bda:	4a24      	ldr	r2, [pc, #144]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000be0:	4b22      	ldr	r3, [pc, #136]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f47f aea9 	bne.w	800099c <HAL_GPIO_Init+0x10>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010000 	.word	0x40010000
 8000c60:	48000400 	.word	0x48000400
 8000c64:	48000800 	.word	0x48000800
 8000c68:	48000c00 	.word	0x48000c00
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f000 bff4 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 816d 	beq.w	8000f86 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cac:	4bb4      	ldr	r3, [pc, #720]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d00c      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb8:	4bb1      	ldr	r3, [pc, #708]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d157      	bne.n	8000d74 <HAL_RCC_OscConfig+0x104>
 8000cc4:	4bae      	ldr	r3, [pc, #696]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd0:	d150      	bne.n	8000d74 <HAL_RCC_OscConfig+0x104>
 8000cd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cd6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cf2:	d802      	bhi.n	8000cfa <HAL_RCC_OscConfig+0x8a>
 8000cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	e015      	b.n	8000d26 <HAL_RCC_OscConfig+0xb6>
 8000cfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cfe:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d12:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d16:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000d22:	4b97      	ldr	r3, [pc, #604]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d2a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000d2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d32:	fa92 f2a2 	rbit	r2, r2
 8000d36:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000d3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	f042 0220 	orr.w	r2, r2, #32
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	f002 021f 	and.w	r2, r2, #31
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f202 	lsl.w	r2, r1, r2
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 8114 	beq.w	8000f84 <HAL_RCC_OscConfig+0x314>
 8000d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f040 810b 	bne.w	8000f84 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f000 bf85 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d84:	d106      	bne.n	8000d94 <HAL_RCC_OscConfig+0x124>
 8000d86:	4b7e      	ldr	r3, [pc, #504]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e036      	b.n	8000e02 <HAL_RCC_OscConfig+0x192>
 8000d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10c      	bne.n	8000dbe <HAL_RCC_OscConfig+0x14e>
 8000da4:	4b76      	ldr	r3, [pc, #472]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a75      	ldr	r2, [pc, #468]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b73      	ldr	r3, [pc, #460]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a72      	ldr	r2, [pc, #456]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e021      	b.n	8000e02 <HAL_RCC_OscConfig+0x192>
 8000dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dce:	d10c      	bne.n	8000dea <HAL_RCC_OscConfig+0x17a>
 8000dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000dd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b68      	ldr	r3, [pc, #416]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a67      	ldr	r2, [pc, #412]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e00b      	b.n	8000e02 <HAL_RCC_OscConfig+0x192>
 8000dea:	4b65      	ldr	r3, [pc, #404]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a64      	ldr	r2, [pc, #400]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b62      	ldr	r3, [pc, #392]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a61      	ldr	r2, [pc, #388]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e02:	4b5f      	ldr	r3, [pc, #380]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e06:	f023 020f 	bic.w	r2, r3, #15
 8000e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	495a      	ldr	r1, [pc, #360]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d054      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fc98 	bl	8000760 <HAL_GetTick>
 8000e30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e36:	f7ff fc93 	bl	8000760 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	@ 0x64
 8000e44:	d902      	bls.n	8000e4c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f000 bf19 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
 8000e4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e50:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000e60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e6c:	d802      	bhi.n	8000e74 <HAL_RCC_OscConfig+0x204>
 8000e6e:	4b44      	ldr	r3, [pc, #272]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	e015      	b.n	8000ea0 <HAL_RCC_OscConfig+0x230>
 8000e74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e78:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e8c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ea4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000ea8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000eac:	fa92 f2a2 	rbit	r2, r2
 8000eb0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000eb4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	f042 0220 	orr.w	r2, r2, #32
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	f002 021f 	and.w	r2, r2, #31
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0b0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1c6>
 8000ed4:	e057      	b.n	8000f86 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fc43 	bl	8000760 <HAL_GetTick>
 8000eda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ede:	e00a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fc3e 	bl	8000760 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b64      	cmp	r3, #100	@ 0x64
 8000eee:	d902      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f000 bec4 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
 8000ef6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000efa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000f0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f16:	d802      	bhi.n	8000f1e <HAL_RCC_OscConfig+0x2ae>
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	e015      	b.n	8000f4a <HAL_RCC_OscConfig+0x2da>
 8000f1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f22:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f36:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_RCC_OscConfig+0x310>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f4e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000f52:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f56:	fa92 f2a2 	rbit	r2, r2
 8000f5a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000f5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f042 0220 	orr.w	r2, r2, #32
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f002 021f 	and.w	r2, r2, #31
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1b0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x270>
 8000f7e:	e002      	b.n	8000f86 <HAL_RCC_OscConfig+0x316>
 8000f80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 816c 	beq.w	8001274 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f9c:	4bcc      	ldr	r3, [pc, #816]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa8:	4bc9      	ldr	r3, [pc, #804]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d16d      	bne.n	8001090 <HAL_RCC_OscConfig+0x420>
 8000fb4:	4bc6      	ldr	r3, [pc, #792]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d167      	bne.n	8001090 <HAL_RCC_OscConfig+0x420>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000fd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fde:	d802      	bhi.n	8000fe6 <HAL_RCC_OscConfig+0x376>
 8000fe0:	4bbb      	ldr	r3, [pc, #748]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	e013      	b.n	800100e <HAL_RCC_OscConfig+0x39e>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ffe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800100a:	4bb1      	ldr	r3, [pc, #708]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 800100c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100e:	2202      	movs	r2, #2
 8001010:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001014:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001018:	fa92 f2a2 	rbit	r2, r2
 800101c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001020:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001024:	fab2 f282 	clz	r2, r2
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	f002 021f 	and.w	r2, r2, #31
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00a      	beq.n	8001056 <HAL_RCC_OscConfig+0x3e6>
 8001040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001044:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d002      	beq.n	8001056 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	f000 be14 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001056:	4b9e      	ldr	r3, [pc, #632]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800105e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001062:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	21f8      	movs	r1, #248	@ 0xf8
 800106c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001074:	fa91 f1a1 	rbit	r1, r1
 8001078:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800107c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001080:	fab1 f181 	clz	r1, r1
 8001084:	b2c9      	uxtb	r1, r1
 8001086:	408b      	lsls	r3, r1
 8001088:	4991      	ldr	r1, [pc, #580]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e0f1      	b.n	8001274 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001094:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8083 	beq.w	80011a8 <HAL_RCC_OscConfig+0x538>
 80010a2:	2301      	movs	r3, #1
 80010a4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80010b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	461a      	mov	r2, r3
 80010ca:	2301      	movs	r3, #1
 80010cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fb47 	bl	8000760 <HAL_GetTick>
 80010d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fb42 	bl	8000760 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d902      	bls.n	80010ee <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f000 bdc8 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001100:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b3f      	cmp	r3, #63	@ 0x3f
 800110c:	d802      	bhi.n	8001114 <HAL_RCC_OscConfig+0x4a4>
 800110e:	4b70      	ldr	r3, [pc, #448]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	e013      	b.n	800113c <HAL_RCC_OscConfig+0x4cc>
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800112c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001138:	4b65      	ldr	r3, [pc, #404]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	2202      	movs	r2, #2
 800113e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001142:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001146:	fa92 f2a2 	rbit	r2, r2
 800114a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800114e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001152:	fab2 f282 	clz	r2, r2
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0b4      	beq.n	80010d8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116e:	4b58      	ldr	r3, [pc, #352]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800117a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	21f8      	movs	r1, #248	@ 0xf8
 8001184:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800118c:	fa91 f1a1 	rbit	r1, r1
 8001190:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001194:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001198:	fab1 f181 	clz	r1, r1
 800119c:	b2c9      	uxtb	r1, r1
 800119e:	408b      	lsls	r3, r1
 80011a0:	494b      	ldr	r1, [pc, #300]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
 80011a6:	e065      	b.n	8001274 <HAL_RCC_OscConfig+0x604>
 80011a8:	2301      	movs	r3, #1
 80011aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80011ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	461a      	mov	r2, r3
 80011d0:	2300      	movs	r3, #0
 80011d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fac4 	bl	8000760 <HAL_GetTick>
 80011d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fabf 	bl	8000760 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d902      	bls.n	80011f4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f000 bd45 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001206:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b3f      	cmp	r3, #63	@ 0x3f
 8001212:	d802      	bhi.n	800121a <HAL_RCC_OscConfig+0x5aa>
 8001214:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	e013      	b.n	8001242 <HAL_RCC_OscConfig+0x5d2>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001232:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_RCC_OscConfig+0x660>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	2202      	movs	r2, #2
 8001244:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001248:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800124c:	fa92 f2a2 	rbit	r2, r2
 8001250:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001254:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f002 021f 	and.w	r2, r2, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1b4      	bne.n	80011de <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8115 	beq.w	80014b4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800128e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d07e      	beq.n	8001398 <HAL_RCC_OscConfig+0x728>
 800129a:	2301      	movs	r3, #1
 800129c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80012ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b0:	fab3 f383 	clz	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_RCC_OscConfig+0x664>)
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	461a      	mov	r2, r3
 80012c0:	2301      	movs	r3, #1
 80012c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fa4c 	bl	8000760 <HAL_GetTick>
 80012c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012cc:	e00f      	b.n	80012ee <HAL_RCC_OscConfig+0x67e>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fa42 	bl	8000760 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d902      	bls.n	80012ee <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f000 bcc8 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001304:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001308:	2202      	movs	r2, #2
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001310:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	fa93 f2a3 	rbit	r2, r3
 800131a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800132c:	2202      	movs	r2, #2
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	fa93 f2a3 	rbit	r2, r3
 800133e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001346:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001348:	4bb0      	ldr	r3, [pc, #704]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 800134a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800134c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001350:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001354:	2102      	movs	r1, #2
 8001356:	6019      	str	r1, [r3, #0]
 8001358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fa93 f1a3 	rbit	r1, r3
 8001366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800136a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800136e:	6019      	str	r1, [r3, #0]
  return result;
 8001370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001374:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0a0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x668>
 8001396:	e08d      	b.n	80014b4 <HAL_RCC_OscConfig+0x844>
 8001398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f2a3 	rbit	r2, r3
 80013b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013ba:	601a      	str	r2, [r3, #0]
  return result;
 80013bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b90      	ldr	r3, [pc, #576]	@ (8001610 <HAL_RCC_OscConfig+0x9a0>)
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	461a      	mov	r2, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff f9c1 	bl	8000760 <HAL_GetTick>
 80013de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff f9bc 	bl	8000760 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d902      	bls.n	80013fa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f000 bc42 	b.w	8001c7e <HAL_RCC_OscConfig+0x100e>
 80013fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001402:	2202      	movs	r2, #2
 8001404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	fa93 f2a3 	rbit	r2, r3
 8001414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001418:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001422:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001426:	2202      	movs	r2, #2
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fa93 f2a3 	rbit	r2, r3
 8001438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001446:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001460:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001466:	4b69      	ldr	r3, [pc, #420]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 8001468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800146a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001472:	2102      	movs	r1, #2
 8001474:	6019      	str	r1, [r3, #0]
 8001476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fa93 f1a3 	rbit	r1, r3
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800148c:	6019      	str	r1, [r3, #0]
  return result;
 800148e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001492:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d197      	bne.n	80013e4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 819e 	beq.w	8001806 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d0:	4b4e      	ldr	r3, [pc, #312]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d116      	bne.n	800150a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	4b4b      	ldr	r3, [pc, #300]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	61d3      	str	r3, [r2, #28]
 80014e8:	4b48      	ldr	r3, [pc, #288]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80014f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001504:	2301      	movs	r3, #1
 8001506:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b42      	ldr	r3, [pc, #264]	@ (8001614 <HAL_RCC_OscConfig+0x9a4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b3f      	ldr	r3, [pc, #252]	@ (8001614 <HAL_RCC_OscConfig+0x9a4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a3e      	ldr	r2, [pc, #248]	@ (8001614 <HAL_RCC_OscConfig+0x9a4>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001522:	f7ff f91d 	bl	8000760 <HAL_GetTick>
 8001526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	e009      	b.n	8001540 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff f918 	bl	8000760 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e39e      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_RCC_OscConfig+0x9a4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ef      	beq.n	800152c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x8fa>
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a2a      	ldr	r2, [pc, #168]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e035      	b.n	80015d6 <HAL_RCC_OscConfig+0x966>
 800156a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x924>
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a20      	ldr	r2, [pc, #128]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	e020      	b.n	80015d6 <HAL_RCC_OscConfig+0x966>
 8001594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001598:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x94e>
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a18      	ldr	r2, [pc, #96]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a15      	ldr	r2, [pc, #84]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x966>
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a0f      	ldr	r2, [pc, #60]	@ (800160c <HAL_RCC_OscConfig+0x99c>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8087 	beq.w	80016f6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f8ba 	bl	8000760 <HAL_GetTick>
 80015ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e012      	b.n	8001618 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f8b5 	bl	8000760 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d908      	bls.n	8001618 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e339      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	10908120 	.word	0x10908120
 8001614:	40007000 	.word	0x40007000
 8001618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fa93 f2a3 	rbit	r2, r3
 8001632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001636:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001640:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800165e:	601a      	str	r2, [r3, #0]
  return result;
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_RCC_OscConfig+0xa10>
 800167a:	4b98      	ldr	r3, [pc, #608]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0xa38>
 8001680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001684:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001690:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	4b8d      	ldr	r3, [pc, #564]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80016b0:	2102      	movs	r1, #2
 80016b2:	6011      	str	r1, [r2, #0]
 80016b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	fa92 f1a2 	rbit	r1, r2
 80016c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016ca:	6011      	str	r1, [r2, #0]
  return result;
 80016cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	fab2 f282 	clz	r2, r2
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	f002 021f 	and.w	r2, r2, #31
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f43f af7f 	beq.w	80015f2 <HAL_RCC_OscConfig+0x982>
 80016f4:	e07d      	b.n	80017f2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f833 	bl	8000760 <HAL_GetTick>
 80016fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff f82e 	bl	8000760 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e2b2      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
 8001718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001720:	2202      	movs	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800175e:	601a      	str	r2, [r3, #0]
  return result;
 8001760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001764:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001768:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0xb10>
 800177a:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	e013      	b.n	80017a8 <HAL_RCC_OscConfig+0xb38>
 8001780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001784:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001790:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	fa93 f2a3 	rbit	r2, r3
 800179a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	4b4d      	ldr	r3, [pc, #308]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017ac:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80017b0:	2102      	movs	r1, #2
 80017b2:	6011      	str	r1, [r2, #0]
 80017b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017b8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	fa92 f1a2 	rbit	r1, r2
 80017c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017ca:	6011      	str	r1, [r2, #0]
  return result;
 80017cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	fab2 f282 	clz	r2, r2
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	f002 021f 	and.w	r2, r2, #31
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d186      	bne.n	8001700 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017f2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a37      	ldr	r2, [pc, #220]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 8001800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8232 	beq.w	8001c7c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	f000 8201 	beq.w	8001c28 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b02      	cmp	r3, #2
 8001834:	f040 8157 	bne.w	8001ae6 <HAL_RCC_OscConfig+0xe76>
 8001838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001858:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800185c:	601a      	str	r2, [r3, #0]
  return result;
 800185e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001862:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001866:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001872:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	461a      	mov	r2, r3
 800187a:	2300      	movs	r3, #0
 800187c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7fe ff6f 	bl	8000760 <HAL_GetTick>
 8001882:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	e009      	b.n	800189c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7fe ff6a 	bl	8000760 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1f0      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018c0:	601a      	str	r2, [r3, #0]
  return result;
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80018ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80018d4:	d804      	bhi.n	80018e0 <HAL_RCC_OscConfig+0xc70>
 80018d6:	4b01      	ldr	r3, [pc, #4]	@ (80018dc <HAL_RCC_OscConfig+0xc6c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	e029      	b.n	8001930 <HAL_RCC_OscConfig+0xcc0>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800190e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	4bc3      	ldr	r3, [pc, #780]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001934:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001938:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800193c:	6011      	str	r1, [r2, #0]
 800193e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001942:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fa92 f1a2 	rbit	r1, r2
 800194c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001950:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001954:	6011      	str	r1, [r2, #0]
  return result;
 8001956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800195a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d185      	bne.n	8001888 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4baf      	ldr	r3, [pc, #700]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	430b      	orrs	r3, r1
 800199e:	49a7      	ldr	r1, [pc, #668]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80019ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019c8:	601a      	str	r2, [r3, #0]
  return result;
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019d2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	461a      	mov	r2, r3
 80019e6:	2301      	movs	r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7fe feb9 	bl	8000760 <HAL_GetTick>
 80019ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f2:	e009      	b.n	8001a08 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7fe feb4 	bl	8000760 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e13a      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
 8001a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a28:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a2c:	601a      	str	r2, [r3, #0]
  return result;
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a40:	d802      	bhi.n	8001a48 <HAL_RCC_OscConfig+0xdd8>
 8001a42:	4b7e      	ldr	r3, [pc, #504]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	e027      	b.n	8001a98 <HAL_RCC_OscConfig+0xe28>
 8001a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a72:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	4b69      	ldr	r3, [pc, #420]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a9c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001aa0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aa4:	6011      	str	r1, [r2, #0]
 8001aa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aaa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fa92 f1a2 	rbit	r1, r2
 8001ab4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ab8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001abc:	6011      	str	r1, [r2, #0]
  return result;
 8001abe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d087      	beq.n	80019f4 <HAL_RCC_OscConfig+0xd84>
 8001ae4:	e0ca      	b.n	8001c7c <HAL_RCC_OscConfig+0x100c>
 8001ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001aee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	461a      	mov	r2, r3
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7fe fe18 	bl	8000760 <HAL_GetTick>
 8001b30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b36:	f7fe fe13 	bl	8000760 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e099      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b6e:	601a      	str	r2, [r3, #0]
  return result;
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b82:	d802      	bhi.n	8001b8a <HAL_RCC_OscConfig+0xf1a>
 8001b84:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e027      	b.n	8001bda <HAL_RCC_OscConfig+0xf6a>
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001baa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_RCC_OscConfig+0xfcc>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bde:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001be2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001be6:	6011      	str	r1, [r2, #0]
 8001be8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	fa92 f1a2 	rbit	r1, r2
 8001bf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bfa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bfe:	6011      	str	r1, [r2, #0]
  return result;
 8001c00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d187      	bne.n	8001b36 <HAL_RCC_OscConfig+0xec6>
 8001c26:	e029      	b.n	8001c7c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d103      	bne.n	8001c40 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e020      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
 8001c3c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_RCC_OscConfig+0x1018>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d10b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c64:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000

08001c8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b09e      	sub	sp, #120	@ 0x78
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e154      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b89      	ldr	r3, [pc, #548]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b86      	ldr	r3, [pc, #536]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4984      	ldr	r1, [pc, #528]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b82      	ldr	r3, [pc, #520]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e13c      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4978      	ldr	r1, [pc, #480]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80cd 	beq.w	8001e9a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d137      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xec>
 8001d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d20:	d802      	bhi.n	8001d28 <HAL_RCC_ClockConfig+0x9c>
 8001d22:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_ClockConfig+0xbc>
 8001d28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d44:	4b62      	ldr	r3, [pc, #392]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d50:	fa92 f2a2 	rbit	r2, r2
 8001d54:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f042 0220 	orr.w	r2, r2, #32
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f002 021f 	and.w	r2, r2, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d171      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0ea      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d137      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x164>
 8001d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d98:	d802      	bhi.n	8001da0 <HAL_RCC_ClockConfig+0x114>
 8001d9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x134>
 8001da0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dbc:	4b44      	ldr	r3, [pc, #272]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001dc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001dce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d135      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0ae      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
 8001df0:	2302      	movs	r3, #2
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e06:	d802      	bhi.n	8001e0e <HAL_RCC_ClockConfig+0x182>
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e00d      	b.n	8001e2a <HAL_RCC_ClockConfig+0x19e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	61ba      	str	r2, [r7, #24]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	fa92 f2a2 	rbit	r2, r2
 8001e34:	617a      	str	r2, [r7, #20]
  return result;
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f002 021f 	and.w	r2, r2, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e07a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 0203 	bic.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	491a      	ldr	r1, [pc, #104]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6a:	f7fe fc79 	bl	8000760 <HAL_GetTick>
 8001e6e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7fe fc75 	bl	8000760 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e062      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 020c 	and.w	r2, r3, #12
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d1eb      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d215      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 0207 	bic.w	r2, r3, #7
 8001eb0:	4906      	ldr	r1, [pc, #24]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d006      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e041      	b.n	8001f4e <HAL_RCC_ClockConfig+0x2c2>
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <HAL_RCC_ClockConfig+0x2cc>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	491a      	ldr	r1, [pc, #104]	@ (8001f58 <HAL_RCC_ClockConfig+0x2cc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_RCC_ClockConfig+0x2cc>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4912      	ldr	r1, [pc, #72]	@ (8001f58 <HAL_RCC_ClockConfig+0x2cc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f12:	f000 f829 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f16:	4601      	mov	r1, r0
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_RCC_ClockConfig+0x2cc>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f20:	22f0      	movs	r2, #240	@ 0xf0
 8001f22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	fa92 f2a2 	rbit	r2, r2
 8001f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	fab2 f282 	clz	r2, r2
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	40d3      	lsrs	r3, r2
 8001f36:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <HAL_RCC_ClockConfig+0x2d0>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_RCC_ClockConfig+0x2d4>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_RCC_ClockConfig+0x2d8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fbc6 	bl	80006d8 <HAL_InitTick>
  
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3778      	adds	r7, #120	@ 0x78
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003814 	.word	0x08003814
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x36>
 8001f96:	e026      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	613b      	str	r3, [r7, #16]
      break;
 8001f9c:	e026      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
      break;
 8001fe4:	e002      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe8:	613b      	str	r3, [r7, #16]
      break;
 8001fea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fec:	693b      	ldr	r3, [r7, #16]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	007a1200 	.word	0x007a1200
 8002004:	0800382c 	.word	0x0800382c
 8002008:	0800383c 	.word	0x0800383c
 800200c:	003d0900 	.word	0x003d0900

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <HAL_RCC_GetHCLKFreq+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800202e:	f7ff ffef 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002032:	4601      	mov	r1, r0
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800203c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002040:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	603a      	str	r2, [r7, #0]
  return result;
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	40d3      	lsrs	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08003824 	.word	0x08003824

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002072:	f7ff ffcd 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002076:	4601      	mov	r1, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002080:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002084:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	603a      	str	r2, [r7, #0]
  return result;
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	40d3      	lsrs	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08003824 	.word	0x08003824

080020b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e049      	b.n	8002156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe f9e0 	bl	800049c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 fb60 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e049      	b.n	8002204 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f841 	bl	800220c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f000 fb09 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <HAL_TIM_PWM_Start+0x24>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e03c      	b.n	80022be <HAL_TIM_PWM_Start+0x9e>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b04      	cmp	r3, #4
 8002248:	d109      	bne.n	800225e <HAL_TIM_PWM_Start+0x3e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e02f      	b.n	80022be <HAL_TIM_PWM_Start+0x9e>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d109      	bne.n	8002278 <HAL_TIM_PWM_Start+0x58>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e022      	b.n	80022be <HAL_TIM_PWM_Start+0x9e>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d109      	bne.n	8002292 <HAL_TIM_PWM_Start+0x72>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	e015      	b.n	80022be <HAL_TIM_PWM_Start+0x9e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d109      	bne.n	80022ac <HAL_TIM_PWM_Start+0x8c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e008      	b.n	80022be <HAL_TIM_PWM_Start+0x9e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e088      	b.n	80023d8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0xb6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d4:	e023      	b.n	800231e <HAL_TIM_PWM_Start+0xfe>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start+0xc6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e4:	e01b      	b.n	800231e <HAL_TIM_PWM_Start+0xfe>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_PWM_Start+0xd6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f4:	e013      	b.n	800231e <HAL_TIM_PWM_Start+0xfe>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d104      	bne.n	8002306 <HAL_TIM_PWM_Start+0xe6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002304:	e00b      	b.n	800231e <HAL_TIM_PWM_Start+0xfe>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b10      	cmp	r3, #16
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start+0xf6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002314:	e003      	b.n	800231e <HAL_TIM_PWM_Start+0xfe>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2201      	movs	r2, #1
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fe08 	bl	8002f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2b      	ldr	r2, [pc, #172]	@ (80023e0 <HAL_TIM_PWM_Start+0x1c0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_TIM_PWM_Start+0x134>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_TIM_PWM_Start+0x1c4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_TIM_PWM_Start+0x134>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a28      	ldr	r2, [pc, #160]	@ (80023e8 <HAL_TIM_PWM_Start+0x1c8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_TIM_PWM_Start+0x134>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_TIM_PWM_Start+0x1cc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_TIM_PWM_Start+0x138>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_TIM_PWM_Start+0x13a>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_TIM_PWM_Start+0x1c0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_TIM_PWM_Start+0x176>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002380:	d009      	beq.n	8002396 <HAL_TIM_PWM_Start+0x176>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1a      	ldr	r2, [pc, #104]	@ (80023f0 <HAL_TIM_PWM_Start+0x1d0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_TIM_PWM_Start+0x176>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a14      	ldr	r2, [pc, #80]	@ (80023e4 <HAL_TIM_PWM_Start+0x1c4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d115      	bne.n	80023c2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_TIM_PWM_Start+0x1d4>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d015      	beq.n	80023d4 <HAL_TIM_PWM_Start+0x1b4>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ae:	d011      	beq.n	80023d4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c0:	e008      	b.n	80023d4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e000      	b.n	80023d6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40014000 	.word	0x40014000
 80023e8:	40014400 	.word	0x40014400
 80023ec:	40014800 	.word	0x40014800
 80023f0:	40000400 	.word	0x40000400
 80023f4:	00010007 	.word	0x00010007

080023f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002412:	2302      	movs	r3, #2
 8002414:	e0ff      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b14      	cmp	r3, #20
 8002422:	f200 80f0 	bhi.w	8002606 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	08002481 	.word	0x08002481
 8002430:	08002607 	.word	0x08002607
 8002434:	08002607 	.word	0x08002607
 8002438:	08002607 	.word	0x08002607
 800243c:	080024c1 	.word	0x080024c1
 8002440:	08002607 	.word	0x08002607
 8002444:	08002607 	.word	0x08002607
 8002448:	08002607 	.word	0x08002607
 800244c:	08002503 	.word	0x08002503
 8002450:	08002607 	.word	0x08002607
 8002454:	08002607 	.word	0x08002607
 8002458:	08002607 	.word	0x08002607
 800245c:	08002543 	.word	0x08002543
 8002460:	08002607 	.word	0x08002607
 8002464:	08002607 	.word	0x08002607
 8002468:	08002607 	.word	0x08002607
 800246c:	08002585 	.word	0x08002585
 8002470:	08002607 	.word	0x08002607
 8002474:	08002607 	.word	0x08002607
 8002478:	08002607 	.word	0x08002607
 800247c:	080025c5 	.word	0x080025c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa18 	bl	80028bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0208 	orr.w	r2, r2, #8
 800249a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6999      	ldr	r1, [r3, #24]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	619a      	str	r2, [r3, #24]
      break;
 80024be:	e0a5      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fa7e 	bl	80029c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6999      	ldr	r1, [r3, #24]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	021a      	lsls	r2, r3, #8
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]
      break;
 8002500:	e084      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fadd 	bl	8002ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0208 	orr.w	r2, r2, #8
 800251c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0204 	bic.w	r2, r2, #4
 800252c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	61da      	str	r2, [r3, #28]
      break;
 8002540:	e064      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fb3b 	bl	8002bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800255c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69d9      	ldr	r1, [r3, #28]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	021a      	lsls	r2, r3, #8
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	61da      	str	r2, [r3, #28]
      break;
 8002582:	e043      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fb7e 	bl	8002c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0208 	orr.w	r2, r2, #8
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80025c2:	e023      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fbbc 	bl	8002d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	021a      	lsls	r2, r3, #8
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002604:	e002      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
      break;
 800260a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop

08002620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_TIM_ConfigClockSource+0x1c>
 8002638:	2302      	movs	r3, #2
 800263a:	e0b6      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x18a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002678:	d03e      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xd8>
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267e:	f200 8087 	bhi.w	8002790 <HAL_TIM_ConfigClockSource+0x170>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002686:	f000 8086 	beq.w	8002796 <HAL_TIM_ConfigClockSource+0x176>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800268e:	d87f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 8002690:	2b70      	cmp	r3, #112	@ 0x70
 8002692:	d01a      	beq.n	80026ca <HAL_TIM_ConfigClockSource+0xaa>
 8002694:	2b70      	cmp	r3, #112	@ 0x70
 8002696:	d87b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 8002698:	2b60      	cmp	r3, #96	@ 0x60
 800269a:	d050      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x11e>
 800269c:	2b60      	cmp	r3, #96	@ 0x60
 800269e:	d877      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 80026a0:	2b50      	cmp	r3, #80	@ 0x50
 80026a2:	d03c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xfe>
 80026a4:	2b50      	cmp	r3, #80	@ 0x50
 80026a6:	d873      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 80026a8:	2b40      	cmp	r3, #64	@ 0x40
 80026aa:	d058      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x13e>
 80026ac:	2b40      	cmp	r3, #64	@ 0x40
 80026ae:	d86f      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 80026b0:	2b30      	cmp	r3, #48	@ 0x30
 80026b2:	d064      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15e>
 80026b4:	2b30      	cmp	r3, #48	@ 0x30
 80026b6:	d86b      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d060      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15e>
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d867      	bhi.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05c      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15e>
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d05a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0x15e>
 80026c8:	e062      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	f000 fc0f 	bl	8002efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	609a      	str	r2, [r3, #8]
      break;
 80026f6:	e04f      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002708:	f000 fbf8 	bl	8002efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e03c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fb6c 	bl	8002e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2150      	movs	r1, #80	@ 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fbc5 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 800273c:	e02c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800274a:	461a      	mov	r2, r3
 800274c:	f000 fb8b 	bl	8002e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2160      	movs	r1, #96	@ 0x60
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fbb5 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 800275c:	e01c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276a:	461a      	mov	r2, r3
 800276c:	f000 fb4c 	bl	8002e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2140      	movs	r1, #64	@ 0x40
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fba5 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 800277c:	e00c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 fb9c 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 800278e:	e003      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a38      	ldr	r2, [pc, #224]	@ (80028a8 <TIM_Base_SetConfig+0xf4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x28>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x28>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a35      	ldr	r2, [pc, #212]	@ (80028ac <TIM_Base_SetConfig+0xf8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <TIM_Base_SetConfig+0xf4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <TIM_Base_SetConfig+0x6a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fc:	d00f      	beq.n	800281e <TIM_Base_SetConfig+0x6a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a2a      	ldr	r2, [pc, #168]	@ (80028ac <TIM_Base_SetConfig+0xf8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00b      	beq.n	800281e <TIM_Base_SetConfig+0x6a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a29      	ldr	r2, [pc, #164]	@ (80028b0 <TIM_Base_SetConfig+0xfc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <TIM_Base_SetConfig+0x6a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a28      	ldr	r2, [pc, #160]	@ (80028b4 <TIM_Base_SetConfig+0x100>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <TIM_Base_SetConfig+0x6a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a27      	ldr	r2, [pc, #156]	@ (80028b8 <TIM_Base_SetConfig+0x104>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d108      	bne.n	8002830 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <TIM_Base_SetConfig+0xf4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00b      	beq.n	8002874 <TIM_Base_SetConfig+0xc0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <TIM_Base_SetConfig+0xfc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0xc0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <TIM_Base_SetConfig+0x100>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0xc0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <TIM_Base_SetConfig+0x104>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d103      	bne.n	800287c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f023 0201 	bic.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]
  }
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40014800 	.word	0x40014800

080028bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0201 	bic.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 0302 	bic.w	r3, r3, #2
 8002908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a28      	ldr	r2, [pc, #160]	@ (80029b8 <TIM_OC1_SetConfig+0xfc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00b      	beq.n	8002934 <TIM_OC1_SetConfig+0x78>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a27      	ldr	r2, [pc, #156]	@ (80029bc <TIM_OC1_SetConfig+0x100>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <TIM_OC1_SetConfig+0x78>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <TIM_OC1_SetConfig+0x104>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_OC1_SetConfig+0x78>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a25      	ldr	r2, [pc, #148]	@ (80029c4 <TIM_OC1_SetConfig+0x108>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10c      	bne.n	800294e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f023 0308 	bic.w	r3, r3, #8
 800293a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <TIM_OC1_SetConfig+0xfc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_OC1_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <TIM_OC1_SetConfig+0x100>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_OC1_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a17      	ldr	r2, [pc, #92]	@ (80029c0 <TIM_OC1_SetConfig+0x104>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_OC1_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <TIM_OC1_SetConfig+0x108>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800297c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800

080029c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f023 0210 	bic.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0320 	bic.w	r3, r3, #32
 8002a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <TIM_OC2_SetConfig+0xf0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10d      	bne.n	8002a48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <TIM_OC2_SetConfig+0xf0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00b      	beq.n	8002a68 <TIM_OC2_SetConfig+0xa0>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <TIM_OC2_SetConfig+0xf4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_OC2_SetConfig+0xa0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ac0 <TIM_OC2_SetConfig+0xf8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_OC2_SetConfig+0xa0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <TIM_OC2_SetConfig+0xfc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d113      	bne.n	8002a90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400
 8002ac4:	40014800 	.word	0x40014800

08002ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <TIM_OC3_SetConfig+0xec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10d      	bne.n	8002b46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <TIM_OC3_SetConfig+0xec>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00b      	beq.n	8002b66 <TIM_OC3_SetConfig+0x9e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <TIM_OC3_SetConfig+0xf0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <TIM_OC3_SetConfig+0x9e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <TIM_OC3_SetConfig+0xf4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <TIM_OC3_SetConfig+0x9e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <TIM_OC3_SetConfig+0xf8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d113      	bne.n	8002b8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	621a      	str	r2, [r3, #32]
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40014400 	.word	0x40014400
 8002bc0:	40014800 	.word	0x40014800

08002bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	031b      	lsls	r3, r3, #12
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <TIM_OC4_SetConfig+0xb8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_OC4_SetConfig+0x7c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <TIM_OC4_SetConfig+0xbc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_OC4_SetConfig+0x7c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <TIM_OC4_SetConfig+0xc0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_OC4_SetConfig+0x7c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <TIM_OC4_SetConfig+0xc4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d109      	bne.n	8002c54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800

08002c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	@ (8002d38 <TIM_OC5_SetConfig+0xac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_OC5_SetConfig+0x72>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <TIM_OC5_SetConfig+0xb0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_OC5_SetConfig+0x72>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <TIM_OC5_SetConfig+0xb4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_OC5_SetConfig+0x72>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a12      	ldr	r2, [pc, #72]	@ (8002d44 <TIM_OC5_SetConfig+0xb8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d109      	bne.n	8002d12 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	621a      	str	r2, [r3, #32]
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	40014400 	.word	0x40014400
 8002d44:	40014800 	.word	0x40014800

08002d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <TIM_OC6_SetConfig+0xb0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_OC6_SetConfig+0x74>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a15      	ldr	r2, [pc, #84]	@ (8002dfc <TIM_OC6_SetConfig+0xb4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <TIM_OC6_SetConfig+0x74>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a14      	ldr	r2, [pc, #80]	@ (8002e00 <TIM_OC6_SetConfig+0xb8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_OC6_SetConfig+0x74>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <TIM_OC6_SetConfig+0xbc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d109      	bne.n	8002dd0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800

08002e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f023 0201 	bic.w	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f023 030a 	bic.w	r3, r3, #10
 8002e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f023 0210 	bic.w	r2, r3, #16
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	031b      	lsls	r3, r3, #12
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f043 0307 	orr.w	r3, r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	021a      	lsls	r2, r3, #8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	bf00      	nop
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2201      	movs	r2, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	401a      	ands	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e054      	b.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a24      	ldr	r2, [pc, #144]	@ (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002fd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a17      	ldr	r2, [pc, #92]	@ (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003008:	d009      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a13      	ldr	r2, [pc, #76]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10c      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400
 8003060:	40014000 	.word	0x40014000

08003064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e040      	b.n	80030f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fa60 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	@ 0x24
 8003090:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f95e 	bl	800336c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f825 	bl	8003100 <UART_SetConfig>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01b      	b.n	80030f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f9dd 	bl	80034b0 <UART_CheckIdleState>
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b8a      	ldr	r3, [pc, #552]	@ (8003354 <UART_SetConfig+0x254>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a78      	ldr	r2, [pc, #480]	@ (8003358 <UART_SetConfig+0x258>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d120      	bne.n	80031be <UART_SetConfig+0xbe>
 800317c:	4b77      	ldr	r3, [pc, #476]	@ (800335c <UART_SetConfig+0x25c>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b03      	cmp	r3, #3
 8003186:	d817      	bhi.n	80031b8 <UART_SetConfig+0xb8>
 8003188:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <UART_SetConfig+0x90>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031ad 	.word	0x080031ad
 8003198:	080031b3 	.word	0x080031b3
 800319c:	080031a7 	.word	0x080031a7
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e01d      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031a6:	2302      	movs	r3, #2
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e01a      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031ac:	2304      	movs	r3, #4
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e017      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031b2:	2308      	movs	r3, #8
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e014      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031b8:	2310      	movs	r3, #16
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e011      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a67      	ldr	r2, [pc, #412]	@ (8003360 <UART_SetConfig+0x260>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d102      	bne.n	80031ce <UART_SetConfig+0xce>
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e009      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a64      	ldr	r2, [pc, #400]	@ (8003364 <UART_SetConfig+0x264>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d102      	bne.n	80031de <UART_SetConfig+0xde>
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e001      	b.n	80031e2 <UART_SetConfig+0xe2>
 80031de:	2310      	movs	r3, #16
 80031e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ea:	d15a      	bne.n	80032a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d827      	bhi.n	8003242 <UART_SetConfig+0x142>
 80031f2:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <UART_SetConfig+0xf8>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe ff04 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe ff22 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <UART_SetConfig+0x268>)
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7fe fe99 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8003236:	61b8      	str	r0, [r7, #24]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77bb      	strb	r3, [r7, #30]
        break;
 800324a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d074      	beq.n	800333c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	005a      	lsls	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d916      	bls.n	800329c <UART_SetConfig+0x19c>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d212      	bcs.n	800329c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f023 030f 	bic.w	r3, r3, #15
 800327e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	b29a      	uxth	r2, r3
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	4313      	orrs	r3, r2
 8003290:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	89fa      	ldrh	r2, [r7, #14]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e04f      	b.n	800333c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	77bb      	strb	r3, [r7, #30]
 80032a0:	e04c      	b.n	800333c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d828      	bhi.n	80032fa <UART_SetConfig+0x1fa>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <UART_SetConfig+0x1b0>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032fb 	.word	0x080032fb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7fe fea8 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 80032d8:	61b8      	str	r0, [r7, #24]
        break;
 80032da:	e013      	b.n	8003304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7fe fec6 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <UART_SetConfig+0x268>)
 80032e6:	61bb      	str	r3, [r7, #24]
        break;
 80032e8:	e00c      	b.n	8003304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fe3d 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 80032ee:	61b8      	str	r0, [r7, #24]
        break;
 80032f0:	e008      	b.n	8003304 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e004      	b.n	8003304 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	77bb      	strb	r3, [r7, #30]
        break;
 8003302:	bf00      	nop
    }

    if (pclk != 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	085a      	lsrs	r2, r3, #1
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d909      	bls.n	8003338 <UART_SetConfig+0x238>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332a:	d205      	bcs.n	8003338 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e001      	b.n	800333c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003348:	7fbb      	ldrb	r3, [r7, #30]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	efff69f3 	.word	0xefff69f3
 8003358:	40013800 	.word	0x40013800
 800335c:	40021000 	.word	0x40021000
 8003360:	40004400 	.word	0x40004400
 8003364:	40004800 	.word	0x40004800
 8003368:	007a1200 	.word	0x007a1200

0800336c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01a      	beq.n	8003482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800346a:	d10a      	bne.n	8003482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b098      	sub	sp, #96	@ 0x60
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034c0:	f7fd f94e 	bl	8000760 <HAL_GetTick>
 80034c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d12e      	bne.n	8003532 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f88c 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d021      	beq.n	8003532 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003502:	653b      	str	r3, [r7, #80]	@ 0x50
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800350c:	647b      	str	r3, [r7, #68]	@ 0x44
 800350e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800351a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e6      	bne.n	80034ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e062      	b.n	80035f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d149      	bne.n	80035d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003540:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003548:	2200      	movs	r2, #0
 800354a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f856 	bl	8003600 <UART_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03c      	beq.n	80035d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	623b      	str	r3, [r7, #32]
   return(result);
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003578:	633b      	str	r3, [r7, #48]	@ 0x30
 800357a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e6      	bne.n	800355a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	60fb      	str	r3, [r7, #12]
   return(result);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e011      	b.n	80035f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3758      	adds	r7, #88	@ 0x58
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003610:	e04f      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d04b      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7fd f8a1 	bl	8000760 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <UART_WaitOnFlagUntilTimeout+0x30>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e04e      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d037      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d034      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d031      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d110      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2208      	movs	r2, #8
 8003662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f838 	bl	80036da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2208      	movs	r2, #8
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e029      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368c:	d111      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f81e 	bl	80036da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0a0      	beq.n	8003612 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b095      	sub	sp, #84	@ 0x54
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003700:	643b      	str	r3, [r7, #64]	@ 0x40
 8003702:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e6      	bne.n	80036e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	61fb      	str	r3, [r7, #28]
   return(result);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374c:	2b01      	cmp	r3, #1
 800374e:	d118      	bne.n	8003782 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	60bb      	str	r3, [r7, #8]
   return(result);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f023 0310 	bic.w	r3, r3, #16
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	613b      	str	r3, [r7, #16]
   return(result);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e6      	bne.n	8003750 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003796:	bf00      	nop
 8003798:	3754      	adds	r7, #84	@ 0x54
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <memset>:
 80037a2:	4402      	add	r2, r0
 80037a4:	4603      	mov	r3, r0
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d100      	bne.n	80037ac <memset+0xa>
 80037aa:	4770      	bx	lr
 80037ac:	f803 1b01 	strb.w	r1, [r3], #1
 80037b0:	e7f9      	b.n	80037a6 <memset+0x4>
	...

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4d0d      	ldr	r5, [pc, #52]	@ (80037ec <__libc_init_array+0x38>)
 80037b8:	4c0d      	ldr	r4, [pc, #52]	@ (80037f0 <__libc_init_array+0x3c>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	2600      	movs	r6, #0
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	4d0b      	ldr	r5, [pc, #44]	@ (80037f4 <__libc_init_array+0x40>)
 80037c6:	4c0c      	ldr	r4, [pc, #48]	@ (80037f8 <__libc_init_array+0x44>)
 80037c8:	f000 f818 	bl	80037fc <_init>
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	2600      	movs	r6, #0
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	0800384c 	.word	0x0800384c
 80037f0:	0800384c 	.word	0x0800384c
 80037f4:	0800384c 	.word	0x0800384c
 80037f8:	08003850 	.word	0x08003850

080037fc <_init>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr

08003808 <_fini>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr
