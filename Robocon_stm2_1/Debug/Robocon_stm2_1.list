
Robocon_stm2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004580  08004580  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004580  08004580  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004580  08004580  00005580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004584  08004584  00005584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004588  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000200  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebf7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d05  00000000  00000000  00014c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00016938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a60  00000000  00000000  00017668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b91a  00000000  00000000  000180c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010834  00000000  00000000  000339e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6eed  00000000  00000000  00044216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eb103  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003818  00000000  00000000  000eb148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000ee960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004530 	.word	0x08004530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004530 	.word	0x08004530

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe36 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f8a0 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fbae 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 fb7c 	bl	80008d4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001dc:	f000 f8f4 	bl	80003c8 <MX_CAN_Init>
  MX_TIM1_Init();
 80001e0:	f000 f942 	bl	8000468 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e4:	f000 f9ec 	bl	80005c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001e8:	f000 fa6c 	bl	80006c4 <MX_TIM3_Init>
  MX_TIM17_Init();
 80001ec:	f000 faf8 	bl	80007e0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	// CANスタート
	HAL_CAN_Start(&hcan);
 80001f0:	4843      	ldr	r0, [pc, #268]	@ (8000300 <main+0x138>)
 80001f2:	f001 f872 	bl	80012da <HAL_CAN_Start>
	// 割り込み有効
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001f6:	2102      	movs	r1, #2
 80001f8:	4841      	ldr	r0, [pc, #260]	@ (8000300 <main+0x138>)
 80001fa:	f001 f8b2 	bl	8001362 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 80001fe:	4b41      	ldr	r3, [pc, #260]	@ (8000304 <main+0x13c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000206:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(2000);
 8000208:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800020c:	f000 fe7c 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,2200);
 8000210:	4b3c      	ldr	r3, [pc, #240]	@ (8000304 <main+0x13c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f640 0298 	movw	r2, #2200	@ 0x898
 8000218:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(2000);
 800021a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800021e:	f000 fe73 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,500);
 8000222:	4b39      	ldr	r3, [pc, #228]	@ (8000308 <main+0x140>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800022a:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(2000);
 800022c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000230:	f000 fe6a 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,2200);
 8000234:	4b34      	ldr	r3, [pc, #208]	@ (8000308 <main+0x140>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f640 0298 	movw	r2, #2200	@ 0x898
 800023c:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(2000);
 800023e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000242:	f000 fe61 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,500);
 8000246:	4b30      	ldr	r3, [pc, #192]	@ (8000308 <main+0x140>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800024e:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(2000);
 8000250:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000254:	f000 fe58 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,2200);
 8000258:	4b2b      	ldr	r3, [pc, #172]	@ (8000308 <main+0x140>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f640 0298 	movw	r2, #2200	@ 0x898
 8000260:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000266:	f000 fe4f 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,500);
 800026a:	4b28      	ldr	r3, [pc, #160]	@ (800030c <main+0x144>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000272:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000278:	f000 fe46 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,2200);
 800027c:	4b23      	ldr	r3, [pc, #140]	@ (800030c <main+0x144>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f640 0298 	movw	r2, #2200	@ 0x898
 8000284:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(2000);
 8000286:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800028a:	f000 fe3d 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,500);
 800028e:	4b1f      	ldr	r3, [pc, #124]	@ (800030c <main+0x144>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000296:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_Delay(2000);
 8000298:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800029c:	f000 fe34 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,2200);
 80002a0:	4b1a      	ldr	r3, [pc, #104]	@ (800030c <main+0x144>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f640 0298 	movw	r2, #2200	@ 0x898
 80002a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	  HAL_Delay(2000);
 80002aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002ae:	f000 fe2b 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,500);
 80002b2:	4b16      	ldr	r3, [pc, #88]	@ (800030c <main+0x144>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002ba:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(2000);
 80002bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002c0:	f000 fe22 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,2200);
 80002c4:	4b11      	ldr	r3, [pc, #68]	@ (800030c <main+0x144>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f640 0298 	movw	r2, #2200	@ 0x898
 80002cc:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(2000);
 80002ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002d2:	f000 fe19 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,500);
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <main+0x148>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002de:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 80002e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002e4:	f000 fe10 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,2200);
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <main+0x148>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f640 0298 	movw	r2, #2200	@ 0x898
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 80002f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002f6:	f000 fe07 	bl	8000f08 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,500);
 80002fa:	bf00      	nop
 80002fc:	e77f      	b.n	80001fe <main+0x36>
 80002fe:	bf00      	nop
 8000300:	20000028 	.word	0x20000028
 8000304:	20000050 	.word	0x20000050
 8000308:	2000009c 	.word	0x2000009c
 800030c:	200000e8 	.word	0x200000e8
 8000310:	20000134 	.word	0x20000134

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b096      	sub	sp, #88	@ 0x58
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800031e:	2228      	movs	r2, #40	@ 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f004 f8d7 	bl	80044d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 031c 	add.w	r3, r7, #28
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
 8000346:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	2302      	movs	r3, #2
 800034a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2310      	movs	r3, #16
 8000352:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000358:	2300      	movs	r3, #0
 800035a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800035c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000360:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fa92 	bl	8001890 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000372:	f000 fb29 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2302      	movs	r3, #2
 800037c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000386:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038c:	f107 031c 	add.w	r3, r7, #28
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fa8a 	bl	80028ac <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800039e:	f000 fb13 	bl	80009c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80003a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fc8e 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003ba:	f000 fb05 	bl	80009c8 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3758      	adds	r7, #88	@ 0x58
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08a      	sub	sp, #40	@ 0x28
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003ce:	4b24      	ldr	r3, [pc, #144]	@ (8000460 <MX_CAN_Init+0x98>)
 80003d0:	4a24      	ldr	r2, [pc, #144]	@ (8000464 <MX_CAN_Init+0x9c>)
 80003d2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003d4:	4b22      	ldr	r3, [pc, #136]	@ (8000460 <MX_CAN_Init+0x98>)
 80003d6:	2210      	movs	r2, #16
 80003d8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003da:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <MX_CAN_Init+0x98>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <MX_CAN_Init+0x98>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <MX_CAN_Init+0x98>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000460 <MX_CAN_Init+0x98>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_CAN_Init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003f8:	4b19      	ldr	r3, [pc, #100]	@ (8000460 <MX_CAN_Init+0x98>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003fe:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_CAN_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000404:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <MX_CAN_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_CAN_Init+0x98>)
 800040c:	2200      	movs	r2, #0
 800040e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <MX_CAN_Init+0x98>)
 8000412:	2200      	movs	r2, #0
 8000414:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000416:	4812      	ldr	r0, [pc, #72]	@ (8000460 <MX_CAN_Init+0x98>)
 8000418:	f000 fd9a 	bl	8000f50 <HAL_CAN_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000422:	f000 fad1 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filter;
  filter.FilterIdHigh         = 0x001 << 5;                  // フィルターID1
 8000426:	2320      	movs	r3, #32
 8000428:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow          = 0x002 << 5;                  // フィルターID2
 800042a:	2340      	movs	r3, #64	@ 0x40
 800042c:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh     = 0x003 << 5;                  // フィルターID3
 800042e:	2360      	movs	r3, #96	@ 0x60
 8000430:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow      = 0x004 << 5;    // フィルターID4
 8000432:	2380      	movs	r3, #128	@ 0x80
 8000434:	60fb      	str	r3, [r7, #12]
  filter.FilterScale          = CAN_FILTERSCALE_16BIT; // 16モード
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  filter.FilterBank           = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
  filter.FilterMode           = CAN_FILTERMODE_IDLIST; // IDリストモード
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  filter.SlaveStartFilterBank = 14;
 8000446:	230e      	movs	r3, #14
 8000448:	627b      	str	r3, [r7, #36]	@ 0x24
  filter.FilterActivation     = ENABLE;
 800044a:	2301      	movs	r3, #1
 800044c:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filter);
 800044e:	463b      	mov	r3, r7
 8000450:	4619      	mov	r1, r3
 8000452:	4803      	ldr	r0, [pc, #12]	@ (8000460 <MX_CAN_Init+0x98>)
 8000454:	f000 fe77 	bl	8001146 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	3728      	adds	r7, #40	@ 0x28
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000028 	.word	0x20000028
 8000464:	40006400 	.word	0x40006400

08000468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b09a      	sub	sp, #104	@ 0x68
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000488:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
 8000498:	615a      	str	r2, [r3, #20]
 800049a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	222c      	movs	r2, #44	@ 0x2c
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f004 f817 	bl	80044d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004a8:	4b43      	ldr	r3, [pc, #268]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004aa:	4a44      	ldr	r2, [pc, #272]	@ (80005bc <MX_TIM1_Init+0x154>)
 80004ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80004ae:	4b42      	ldr	r3, [pc, #264]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004b0:	223f      	movs	r2, #63	@ 0x3f
 80004b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b4:	4b40      	ldr	r3, [pc, #256]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80004ba:	4b3f      	ldr	r3, [pc, #252]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004bc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80004c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c2:	4b3d      	ldr	r3, [pc, #244]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c8:	4b3b      	ldr	r3, [pc, #236]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b3a      	ldr	r3, [pc, #232]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004d4:	4838      	ldr	r0, [pc, #224]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004d6:	f002 fd1f 	bl	8002f18 <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004e0:	f000 fa72 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004ee:	4619      	mov	r1, r3
 80004f0:	4831      	ldr	r0, [pc, #196]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80004f2:	f002 fedd 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004fc:	f000 fa64 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000500:	482d      	ldr	r0, [pc, #180]	@ (80005b8 <MX_TIM1_Init+0x150>)
 8000502:	f002 fd60 	bl	8002fc6 <HAL_TIM_PWM_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800050c:	f000 fa5c 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800051c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000520:	4619      	mov	r1, r3
 8000522:	4825      	ldr	r0, [pc, #148]	@ (80005b8 <MX_TIM1_Init+0x150>)
 8000524:	f003 fb52 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800052e:	f000 fa4b 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000532:	2360      	movs	r3, #96	@ 0x60
 8000534:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800053a:	2300      	movs	r3, #0
 800053c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800053e:	2300      	movs	r3, #0
 8000540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000546:	2300      	movs	r3, #0
 8000548:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800054e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000552:	2204      	movs	r2, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4818      	ldr	r0, [pc, #96]	@ (80005b8 <MX_TIM1_Init+0x150>)
 8000558:	f002 fd96 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000562:	f000 fa31 	bl	80009c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800057a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000588:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4807      	ldr	r0, [pc, #28]	@ (80005b8 <MX_TIM1_Init+0x150>)
 800059c:	f003 fb84 	bl	8003ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80005a6:	f000 fa0f 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005aa:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <MX_TIM1_Init+0x150>)
 80005ac:	f000 fad4 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80005b0:	bf00      	nop
 80005b2:	3768      	adds	r7, #104	@ 0x68
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000050 	.word	0x20000050
 80005bc:	40012c00 	.word	0x40012c00

080005c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	@ 0x38
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f2:	4b33      	ldr	r3, [pc, #204]	@ (80006c0 <MX_TIM2_Init+0x100>)
 80005f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_TIM2_Init+0x100>)
 80005fc:	223f      	movs	r2, #63	@ 0x3f
 80005fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000608:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800060c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061a:	4829      	ldr	r0, [pc, #164]	@ (80006c0 <MX_TIM2_Init+0x100>)
 800061c:	f002 fc7c 	bl	8002f18 <HAL_TIM_Base_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000626:	f000 f9cf 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000630:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000634:	4619      	mov	r1, r3
 8000636:	4822      	ldr	r0, [pc, #136]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000638:	f002 fe3a 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000642:	f000 f9c1 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000646:	481e      	ldr	r0, [pc, #120]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000648:	f002 fcbd 	bl	8002fc6 <HAL_TIM_PWM_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000652:	f000 f9b9 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4816      	ldr	r0, [pc, #88]	@ (80006c0 <MX_TIM2_Init+0x100>)
 8000666:	f003 fab1 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000670:	f000 f9aa 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000674:	2360      	movs	r3, #96	@ 0x60
 8000676:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2204      	movs	r2, #4
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_TIM2_Init+0x100>)
 800068c:	f002 fcfc 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000696:	f000 f997 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	220c      	movs	r2, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	4807      	ldr	r0, [pc, #28]	@ (80006c0 <MX_TIM2_Init+0x100>)
 80006a2:	f002 fcf1 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80006ac:	f000 f98c 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <MX_TIM2_Init+0x100>)
 80006b2:	f000 fa51 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80006b6:	bf00      	nop
 80006b8:	3738      	adds	r7, #56	@ 0x38
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000009c 	.word	0x2000009c

080006c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	@ 0x38
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f6:	4b38      	ldr	r3, [pc, #224]	@ (80007d8 <MX_TIM3_Init+0x114>)
 80006f8:	4a38      	ldr	r2, [pc, #224]	@ (80007dc <MX_TIM3_Init+0x118>)
 80006fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80006fc:	4b36      	ldr	r3, [pc, #216]	@ (80007d8 <MX_TIM3_Init+0x114>)
 80006fe:	223f      	movs	r2, #63	@ 0x3f
 8000700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b35      	ldr	r3, [pc, #212]	@ (80007d8 <MX_TIM3_Init+0x114>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000708:	4b33      	ldr	r3, [pc, #204]	@ (80007d8 <MX_TIM3_Init+0x114>)
 800070a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800070e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b31      	ldr	r3, [pc, #196]	@ (80007d8 <MX_TIM3_Init+0x114>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <MX_TIM3_Init+0x114>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800071c:	482e      	ldr	r0, [pc, #184]	@ (80007d8 <MX_TIM3_Init+0x114>)
 800071e:	f002 fbfb 	bl	8002f18 <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000728:	f000 f94e 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000736:	4619      	mov	r1, r3
 8000738:	4827      	ldr	r0, [pc, #156]	@ (80007d8 <MX_TIM3_Init+0x114>)
 800073a:	f002 fdb9 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000744:	f000 f940 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000748:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_TIM3_Init+0x114>)
 800074a:	f002 fc3c 	bl	8002fc6 <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000754:	f000 f938 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	481c      	ldr	r0, [pc, #112]	@ (80007d8 <MX_TIM3_Init+0x114>)
 8000768:	f003 fa30 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000772:	f000 f929 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	@ 0x60
 8000778:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	2204      	movs	r2, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <MX_TIM3_Init+0x114>)
 800078e:	f002 fc7b 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000798:	f000 f916 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	2208      	movs	r2, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_TIM3_Init+0x114>)
 80007a4:	f002 fc70 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80007ae:	f000 f90b 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	220c      	movs	r2, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <MX_TIM3_Init+0x114>)
 80007ba:	f002 fc65 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80007c4:	f000 f900 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <MX_TIM3_Init+0x114>)
 80007ca:	f000 f9c5 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80007ce:	bf00      	nop
 80007d0:	3738      	adds	r7, #56	@ 0x38
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000e8 	.word	0x200000e8
 80007dc:	40000400 	.word	0x40000400

080007e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b092      	sub	sp, #72	@ 0x48
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	222c      	movs	r2, #44	@ 0x2c
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fe68 	bl	80044d6 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000806:	4b31      	ldr	r3, [pc, #196]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000808:	4a31      	ldr	r2, [pc, #196]	@ (80008d0 <MX_TIM17_Init+0xf0>)
 800080a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 800080c:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <MX_TIM17_Init+0xec>)
 800080e:	223f      	movs	r2, #63	@ 0x3f
 8000810:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 19999;
 8000818:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <MX_TIM17_Init+0xec>)
 800081a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800081e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000826:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <MX_TIM17_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000832:	4826      	ldr	r0, [pc, #152]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000834:	f002 fb70 	bl	8002f18 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800083e:	f000 f8c3 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000842:	4822      	ldr	r0, [pc, #136]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000844:	f002 fbbf 	bl	8002fc6 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800084e:	f000 f8bb 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	@ 0x60
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4815      	ldr	r0, [pc, #84]	@ (80008cc <MX_TIM17_Init+0xec>)
 8000878:	f002 fc06 	bl	8003088 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000882:	f000 f8a1 	bl	80009c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <MX_TIM17_Init+0xec>)
 80008ae:	f003 f9fb 	bl	8003ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80008b8:	f000 f886 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <MX_TIM17_Init+0xec>)
 80008be:	f000 f94b 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3748      	adds	r7, #72	@ 0x48
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000134 	.word	0x20000134
 80008d0:	40014800 	.word	0x40014800

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <MX_USART2_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008e0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000918:	f003 fa3e 	bl	8003d98 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f851 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000180 	.word	0x20000180
 8000930:	40004400 	.word	0x40004400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_GPIO_Init+0x8c>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR5_Pin|DIR6_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2190      	movs	r1, #144	@ 0x90
 8000996:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <MX_GPIO_Init+0x90>)
 8000998:	f000 ff62 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR5_Pin DIR6_Pin */
  GPIO_InitStruct.Pin = DIR5_Pin|DIR6_Pin;
 800099c:	2390      	movs	r3, #144	@ 0x90
 800099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_GPIO_Init+0x90>)
 80009b4:	f000 fde2 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000400 	.word	0x48000400

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x44>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x44>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <HAL_CAN_MspInit+0x80>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d129      	bne.n	8000a92 <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_CAN_MspInit+0x84>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_CAN_MspInit+0x84>)
 8000a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_CAN_MspInit+0x84>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_CAN_MspInit+0x84>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a11      	ldr	r2, [pc, #68]	@ (8000aa0 <HAL_CAN_MspInit+0x84>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_CAN_MspInit+0x84>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a80:	2309      	movs	r3, #9
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f000 fd75 	bl	800157c <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	@ 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40006400 	.word	0x40006400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a25      	ldr	r2, [pc, #148]	@ (8000b48 <HAL_TIM_Base_MspInit+0xa4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10c      	bne.n	8000ad0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a24      	ldr	r2, [pc, #144]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000ace:	e034      	b.n	8000b3a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad8:	d10c      	bne.n	8000af4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
}
 8000af2:	e022      	b.n	8000b3a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <HAL_TIM_Base_MspInit+0xac>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10c      	bne.n	8000b18 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
}
 8000b16:	e010      	b.n	8000b3a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <HAL_TIM_Base_MspInit+0xb0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10b      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a09      	ldr	r2, [pc, #36]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <HAL_TIM_Base_MspInit+0xa8>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
}
 8000b3a:	bf00      	nop
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40012c00 	.word	0x40012c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40000400 	.word	0x40000400
 8000b54:	40014800 	.word	0x40014800

08000b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a54      	ldr	r2, [pc, #336]	@ (8000cc8 <HAL_TIM_MspPostInit+0x170>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d11e      	bne.n	8000bb8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a53      	ldr	r2, [pc, #332]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b51      	ldr	r3, [pc, #324]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM5_Pin;
 8000b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f000 fce3 	bl	800157c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000bb6:	e082      	b.n	8000cbe <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc0:	d11d      	bne.n	8000bfe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b42      	ldr	r3, [pc, #264]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a41      	ldr	r2, [pc, #260]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b3f      	ldr	r3, [pc, #252]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWMtest_Pin|PWM4_Pin;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fcc0 	bl	800157c <HAL_GPIO_Init>
}
 8000bfc:	e05f      	b.n	8000cbe <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM3)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a33      	ldr	r2, [pc, #204]	@ (8000cd0 <HAL_TIM_MspPostInit+0x178>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d139      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b30      	ldr	r3, [pc, #192]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c12:	6153      	str	r3, [r2, #20]
 8000c14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	4a29      	ldr	r2, [pc, #164]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c2a:	6153      	str	r3, [r2, #20]
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM3_Pin;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM3_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f000 fc91 	bl	800157c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	@ (8000cd4 <HAL_TIM_MspPostInit+0x17c>)
 8000c76:	f000 fc81 	bl	800157c <HAL_GPIO_Init>
}
 8000c7a:	e020      	b.n	8000cbe <HAL_TIM_MspPostInit+0x166>
  else if(htim->Instance==TIM17)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <HAL_TIM_MspPostInit+0x180>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11b      	bne.n	8000cbe <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_TIM_MspPostInit+0x174>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM6_Pin;
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PWM6_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <HAL_TIM_MspPostInit+0x17c>)
 8000cba:	f000 fc5f 	bl	800157c <HAL_GPIO_Init>
}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	@ 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	40014800 	.word	0x40014800

08000cdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d129      	bne.n	8000d52 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_UART_MspInit+0x84>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d2e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f000 fc15 	bl	800157c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	@ 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dba:	f000 f885 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f003 fb67 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff f9d5 	bl	80001c8 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e20:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e2c:	08004588 	.word	0x08004588
  ldr r2, =_sbss
 8000e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e34:	2000020c 	.word	0x2000020c

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_Init+0x28>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_Init+0x28>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fb61 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fdbc 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fb6b 	bl	8001562 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 fb41 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000208 	.word	0x20000208

08000ef0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000208 	.word	0x20000208

08000f08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0ed      	b.n	800113e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fd54 	bl	8000a1c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f84:	f7ff ffb4 	bl	8000ef0 <HAL_GetTick>
 8000f88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f8a:	e012      	b.n	8000fb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f8c:	f7ff ffb0 	bl	8000ef0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b0a      	cmp	r3, #10
 8000f98:	d90b      	bls.n	8000fb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0c5      	b.n	800113e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0e5      	beq.n	8000f8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0202 	bic.w	r2, r2, #2
 8000fce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd0:	f7ff ff8e 	bl	8000ef0 <HAL_GetTick>
 8000fd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fd6:	e012      	b.n	8000ffe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd8:	f7ff ff8a 	bl	8000ef0 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b0a      	cmp	r3, #10
 8000fe4:	d90b      	bls.n	8000ffe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e09f      	b.n	800113e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1e5      	bne.n	8000fd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e1b      	ldrb	r3, [r3, #24]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e5b      	ldrb	r3, [r3, #25]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e9b      	ldrb	r3, [r3, #26]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0220 	orr.w	r2, r2, #32
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0220 	bic.w	r2, r2, #32
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7edb      	ldrb	r3, [r3, #27]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0210 	bic.w	r2, r2, #16
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0210 	orr.w	r2, r2, #16
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7f1b      	ldrb	r3, [r3, #28]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0208 	orr.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e007      	b.n	80010de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0208 	bic.w	r2, r2, #8
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7f5b      	ldrb	r3, [r3, #29]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0204 	orr.w	r2, r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0204 	bic.w	r2, r2, #4
 8001106:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	ea42 0103 	orr.w	r1, r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001146:	b480      	push	{r7}
 8001148:	b087      	sub	sp, #28
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800115e:	7cfb      	ldrb	r3, [r7, #19]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d003      	beq.n	800116c <HAL_CAN_ConfigFilter+0x26>
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	2b02      	cmp	r3, #2
 8001168:	f040 80aa 	bne.w	80012c0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2201      	movs	r2, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d123      	bne.n	80011ee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	401a      	ands	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3248      	adds	r2, #72	@ 0x48
 80011ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011e4:	6979      	ldr	r1, [r7, #20]
 80011e6:	3348      	adds	r3, #72	@ 0x48
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d122      	bne.n	800123c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	431a      	orrs	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001216:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3248      	adds	r2, #72	@ 0x48
 800121c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001230:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001232:	6979      	ldr	r1, [r7, #20]
 8001234:	3348      	adds	r3, #72	@ 0x48
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001256:	e007      	b.n	8001268 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001282:	e007      	b.n	8001294 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012b2:	f023 0201 	bic.w	r2, r3, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e006      	b.n	80012ce <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
  }
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d12e      	bne.n	800134c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001306:	f7ff fdf3 	bl	8000ef0 <HAL_GetTick>
 800130a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800130c:	e012      	b.n	8001334 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800130e:	f7ff fdef 	bl	8000ef0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b0a      	cmp	r3, #10
 800131a:	d90b      	bls.n	8001334 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001320:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2205      	movs	r2, #5
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e012      	b.n	800135a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e5      	bne.n	800130e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	e006      	b.n	800135a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
  }
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d002      	beq.n	8001380 <HAL_CAN_ActivateNotification+0x1e>
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d109      	bne.n	8001394 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6959      	ldr	r1, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	e006      	b.n	80013a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
  }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff47 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff5c 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffb0 	bl	80014d0 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e14e      	b.n	800182a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8140 	beq.w	8001824 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x40>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 0201 	and.w	r2, r3, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b03      	cmp	r3, #3
 8001628:	d017      	beq.n	800165a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0203 	and.w	r2, r3, #3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 809a 	beq.w	8001824 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b55      	ldr	r3, [pc, #340]	@ (8001848 <HAL_GPIO_Init+0x2cc>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a54      	ldr	r2, [pc, #336]	@ (8001848 <HAL_GPIO_Init+0x2cc>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b52      	ldr	r3, [pc, #328]	@ (8001848 <HAL_GPIO_Init+0x2cc>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001708:	4a50      	ldr	r2, [pc, #320]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001732:	d013      	beq.n	800175c <HAL_GPIO_Init+0x1e0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a46      	ldr	r2, [pc, #280]	@ (8001850 <HAL_GPIO_Init+0x2d4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00d      	beq.n	8001758 <HAL_GPIO_Init+0x1dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <HAL_GPIO_Init+0x2d8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1d8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a44      	ldr	r2, [pc, #272]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_GPIO_Init+0x1d4>
 800174c:	2303      	movs	r3, #3
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x1e2>
 8001750:	2305      	movs	r3, #5
 8001752:	e004      	b.n	800175e <HAL_GPIO_Init+0x1e2>
 8001754:	2302      	movs	r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x1e2>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_GPIO_Init+0x1e2>
 800175c:	2300      	movs	r3, #0
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f002 0203 	and.w	r2, r2, #3
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	4093      	lsls	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800176e:	4937      	ldr	r1, [pc, #220]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017a0:	4a2e      	ldr	r2, [pc, #184]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ca:	4a24      	ldr	r2, [pc, #144]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017f4:	4a19      	ldr	r2, [pc, #100]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_GPIO_Init+0x2e0>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f aea9 	bne.w	800158c <HAL_GPIO_Init+0x10>
  }
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	48000400 	.word	0x48000400
 8001854:	48000800 	.word	0x48000800
 8001858:	48000c00 	.word	0x48000c00
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800187c:	e002      	b.n	8001884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001896:	af00      	add	r7, sp, #0
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f000 bff4 	b.w	800289e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 816d 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018cc:	4bb4      	ldr	r3, [pc, #720]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d00c      	beq.n	80018f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018d8:	4bb1      	ldr	r3, [pc, #708]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d157      	bne.n	8001994 <HAL_RCC_OscConfig+0x104>
 80018e4:	4bae      	ldr	r3, [pc, #696]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f0:	d150      	bne.n	8001994 <HAL_RCC_OscConfig+0x104>
 80018f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001906:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b3f      	cmp	r3, #63	@ 0x3f
 8001912:	d802      	bhi.n	800191a <HAL_RCC_OscConfig+0x8a>
 8001914:	4ba2      	ldr	r3, [pc, #648]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0xb6>
 800191a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800191e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800192e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001932:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001936:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001942:	4b97      	ldr	r3, [pc, #604]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800194a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800194e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800195a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800195e:	fab2 f282 	clz	r2, r2
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f002 021f 	and.w	r2, r2, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8114 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x314>
 800197c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 810b 	bne.w	8001ba4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	f000 bf85 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a4:	d106      	bne.n	80019b4 <HAL_RCC_OscConfig+0x124>
 80019a6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7d      	ldr	r2, [pc, #500]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e036      	b.n	8001a22 <HAL_RCC_OscConfig+0x192>
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x14e>
 80019c4:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a75      	ldr	r2, [pc, #468]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b73      	ldr	r3, [pc, #460]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a72      	ldr	r2, [pc, #456]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e021      	b.n	8001a22 <HAL_RCC_OscConfig+0x192>
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x17a>
 80019f0:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b68      	ldr	r3, [pc, #416]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a67      	ldr	r2, [pc, #412]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x192>
 8001a0a:	4b65      	ldr	r3, [pc, #404]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a64      	ldr	r2, [pc, #400]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b62      	ldr	r3, [pc, #392]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a61      	ldr	r2, [pc, #388]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a22:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	495a      	ldr	r1, [pc, #360]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d054      	beq.n	8001af6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa50 	bl	8000ef0 <HAL_GetTick>
 8001a50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a56:	f7ff fa4b 	bl	8000ef0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	d902      	bls.n	8001a6c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f000 bf19 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
 8001a6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a70:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001a80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a8c:	d802      	bhi.n	8001a94 <HAL_RCC_OscConfig+0x204>
 8001a8e:	4b44      	ldr	r3, [pc, #272]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	e015      	b.n	8001ac0 <HAL_RCC_OscConfig+0x230>
 8001a94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a98:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001aa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ab0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001abc:	4b38      	ldr	r3, [pc, #224]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ac4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ac8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001acc:	fa92 f2a2 	rbit	r2, r2
 8001ad0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ad4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0b0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1c6>
 8001af4:	e057      	b.n	8001ba6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff f9fb 	bl	8000ef0 <HAL_GetTick>
 8001afa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f9f6 	bl	8000ef0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	@ 0x64
 8001b0e:	d902      	bls.n	8001b16 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f000 bec4 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
 8001b16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b1a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b36:	d802      	bhi.n	8001b3e <HAL_RCC_OscConfig+0x2ae>
 8001b38:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x2da>
 8001b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b42:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b56:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001b66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <HAL_RCC_OscConfig+0x310>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b6e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001b72:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b76:	fa92 f2a2 	rbit	r2, r2
 8001b7a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001b7e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f002 021f 	and.w	r2, r2, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1b0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x270>
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_OscConfig+0x316>
 8001ba0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001baa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 816c 	beq.w	8001e94 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bbc:	4bcc      	ldr	r3, [pc, #816]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc8:	4bc9      	ldr	r3, [pc, #804]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d16d      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x420>
 8001bd4:	4bc6      	ldr	r3, [pc, #792]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d167      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x420>
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001bf2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bfe:	d802      	bhi.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001c00:	4bbb      	ldr	r3, [pc, #748]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	e013      	b.n	8001c2e <HAL_RCC_OscConfig+0x39e>
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c2a:	4bb1      	ldr	r3, [pc, #708]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001c34:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c38:	fa92 f2a2 	rbit	r2, r2
 8001c3c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001c40:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001c44:	fab2 f282 	clz	r2, r2
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f002 021f 	and.w	r2, r2, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00a      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3e6>
 8001c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d002      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f000 be14 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b9e      	ldr	r3, [pc, #632]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	21f8      	movs	r1, #248	@ 0xf8
 8001c8c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c94:	fa91 f1a1 	rbit	r1, r1
 8001c98:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001c9c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001ca0:	fab1 f181 	clz	r1, r1
 8001ca4:	b2c9      	uxtb	r1, r1
 8001ca6:	408b      	lsls	r3, r1
 8001ca8:	4991      	ldr	r1, [pc, #580]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e0f1      	b.n	8001e94 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8083 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x538>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001cd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ce2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2301      	movs	r3, #1
 8001cec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff f8ff 	bl	8000ef0 <HAL_GetTick>
 8001cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff f8fa 	bl	8000ef0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d902      	bls.n	8001d0e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f000 bdc8 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d20:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d2c:	d802      	bhi.n	8001d34 <HAL_RCC_OscConfig+0x4a4>
 8001d2e:	4b70      	ldr	r3, [pc, #448]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	e013      	b.n	8001d5c <HAL_RCC_OscConfig+0x4cc>
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001d58:	4b65      	ldr	r3, [pc, #404]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001d62:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001d6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0b4      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	21f8      	movs	r1, #248	@ 0xf8
 8001da4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001dac:	fa91 f1a1 	rbit	r1, r1
 8001db0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001db4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001db8:	fab1 f181 	clz	r1, r1
 8001dbc:	b2c9      	uxtb	r1, r1
 8001dbe:	408b      	lsls	r3, r1
 8001dc0:	494b      	ldr	r1, [pc, #300]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
 8001dc6:	e065      	b.n	8001e94 <HAL_RCC_OscConfig+0x604>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001dda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001de8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	461a      	mov	r2, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff f87c 	bl	8000ef0 <HAL_GetTick>
 8001df8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f877 	bl	8000ef0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d902      	bls.n	8001e14 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f000 bd45 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e32:	d802      	bhi.n	8001e3a <HAL_RCC_OscConfig+0x5aa>
 8001e34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	e013      	b.n	8001e62 <HAL_RCC_OscConfig+0x5d2>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <HAL_RCC_OscConfig+0x660>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	2202      	movs	r2, #2
 8001e64:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001e68:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e6c:	fa92 f2a2 	rbit	r2, r2
 8001e70:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001e74:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f042 0220 	orr.w	r2, r2, #32
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1b4      	bne.n	8001dfe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8115 	beq.w	80020d4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d07e      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x728>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_RCC_OscConfig+0x664>)
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f804 	bl	8000ef0 <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eec:	e00f      	b.n	8001f0e <HAL_RCC_OscConfig+0x67e>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe fffa 	bl	8000ef0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d902      	bls.n	8001f0e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	f000 bcc8 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f68:	4bb0      	ldr	r3, [pc, #704]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 8001f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f74:	2102      	movs	r1, #2
 8001f76:	6019      	str	r1, [r3, #0]
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f1a3 	rbit	r1, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f8e:	6019      	str	r1, [r3, #0]
  return result;
 8001f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f94:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0a0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x668>
 8001fb6:	e08d      	b.n	80020d4 <HAL_RCC_OscConfig+0x844>
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fda:	601a      	str	r2, [r3, #0]
  return result;
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fe4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b90      	ldr	r3, [pc, #576]	@ (8002230 <HAL_RCC_OscConfig+0x9a0>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe ff79 	bl	8000ef0 <HAL_GetTick>
 8001ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe ff74 	bl	8000ef0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d902      	bls.n	800201a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	f000 bc42 	b.w	800289e <HAL_RCC_OscConfig+0x100e>
 800201a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002066:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002084:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002086:	4b69      	ldr	r3, [pc, #420]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 8002088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800208a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002092:	2102      	movs	r1, #2
 8002094:	6019      	str	r1, [r3, #0]
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f1a3 	rbit	r1, r3
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020ac:	6019      	str	r1, [r3, #0]
  return result;
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d197      	bne.n	8002004 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 819e 	beq.w	8002426 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f0:	4b4e      	ldr	r3, [pc, #312]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d116      	bne.n	800212a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002106:	61d3      	str	r3, [r2, #28]
 8002108:	4b48      	ldr	r3, [pc, #288]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002122:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <HAL_RCC_OscConfig+0x9a4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11a      	bne.n	800216c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002136:	4b3f      	ldr	r3, [pc, #252]	@ (8002234 <HAL_RCC_OscConfig+0x9a4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3e      	ldr	r2, [pc, #248]	@ (8002234 <HAL_RCC_OscConfig+0x9a4>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002142:	f7fe fed5 	bl	8000ef0 <HAL_GetTick>
 8002146:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	e009      	b.n	8002160 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe fed0 	bl	8000ef0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	@ 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e39e      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_RCC_OscConfig+0x9a4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ef      	beq.n	800214c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x8fa>
 800217c:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e035      	b.n	80021f6 <HAL_RCC_OscConfig+0x966>
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x924>
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a23      	ldr	r2, [pc, #140]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b21      	ldr	r3, [pc, #132]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a20      	ldr	r2, [pc, #128]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	e020      	b.n	80021f6 <HAL_RCC_OscConfig+0x966>
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x94e>
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a18      	ldr	r2, [pc, #96]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a15      	ldr	r2, [pc, #84]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0x966>
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <HAL_RCC_OscConfig+0x99c>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8087 	beq.w	8002316 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe fe72 	bl	8000ef0 <HAL_GetTick>
 800220c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e012      	b.n	8002238 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fe6d 	bl	8000ef0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d908      	bls.n	8002238 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e339      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	10908120 	.word	0x10908120
 8002234:	40007000 	.word	0x40007000
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002264:	2202      	movs	r2, #2
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800227e:	601a      	str	r2, [r3, #0]
  return result;
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002288:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_OscConfig+0xa10>
 800229a:	4b98      	ldr	r3, [pc, #608]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	e013      	b.n	80022c8 <HAL_RCC_OscConfig+0xa38>
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	4b8d      	ldr	r3, [pc, #564]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022cc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80022d0:	2102      	movs	r1, #2
 80022d2:	6011      	str	r1, [r2, #0]
 80022d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	fa92 f1a2 	rbit	r1, r2
 80022e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80022ea:	6011      	str	r1, [r2, #0]
  return result;
 80022ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022f0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f002 021f 	and.w	r2, r2, #31
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	f43f af7f 	beq.w	8002212 <HAL_RCC_OscConfig+0x982>
 8002314:	e07d      	b.n	8002412 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe fdeb 	bl	8000ef0 <HAL_GetTick>
 800231a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe fde6 	bl	8000ef0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e2b2      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002364:	2202      	movs	r2, #2
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800237e:	601a      	str	r2, [r3, #0]
  return result;
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002388:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0xb10>
 800239a:	4b58      	ldr	r3, [pc, #352]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0xb38>
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023a8:	2202      	movs	r2, #2
 80023aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fa93 f2a3 	rbit	r2, r3
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	4b4d      	ldr	r3, [pc, #308]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023cc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80023d0:	2102      	movs	r1, #2
 80023d2:	6011      	str	r1, [r2, #0]
 80023d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	fa92 f1a2 	rbit	r1, r2
 80023e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023ea:	6011      	str	r1, [r2, #0]
  return result;
 80023ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d186      	bne.n	8002320 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002412:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241a:	4b38      	ldr	r3, [pc, #224]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a37      	ldr	r2, [pc, #220]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 8002420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8232 	beq.w	800289c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	f000 8201 	beq.w	8002848 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b02      	cmp	r3, #2
 8002454:	f040 8157 	bne.w	8002706 <HAL_RCC_OscConfig+0xe76>
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002460:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800247c:	601a      	str	r2, [r3, #0]
  return result;
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002486:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002492:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	461a      	mov	r2, r3
 800249a:	2300      	movs	r3, #0
 800249c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fd27 	bl	8000ef0 <HAL_GetTick>
 80024a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	e009      	b.n	80024bc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fd22 	bl	8000ef0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1f0      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024e0:	601a      	str	r2, [r3, #0]
  return result;
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80024f4:	d804      	bhi.n	8002500 <HAL_RCC_OscConfig+0xc70>
 80024f6:	4b01      	ldr	r3, [pc, #4]	@ (80024fc <HAL_RCC_OscConfig+0xc6c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	e029      	b.n	8002550 <HAL_RCC_OscConfig+0xcc0>
 80024fc:	40021000 	.word	0x40021000
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002508:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800252e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	4bc3      	ldr	r3, [pc, #780]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002554:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002558:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800255c:	6011      	str	r1, [r2, #0]
 800255e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002562:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	fa92 f1a2 	rbit	r1, r2
 800256c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002570:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002574:	6011      	str	r1, [r2, #0]
  return result;
 8002576:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800257a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	fab2 f282 	clz	r2, r2
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f002 021f 	and.w	r2, r2, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d185      	bne.n	80024a8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259c:	4baf      	ldr	r3, [pc, #700]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80025b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	430b      	orrs	r3, r1
 80025be:	49a7      	ldr	r1, [pc, #668]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80025cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025e8:	601a      	str	r2, [r3, #0]
  return result;
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	461a      	mov	r2, r3
 8002606:	2301      	movs	r3, #1
 8002608:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe fc71 	bl	8000ef0 <HAL_GetTick>
 800260e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002612:	e009      	b.n	8002628 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fc6c 	bl	8000ef0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e13a      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800264c:	601a      	str	r2, [r3, #0]
  return result;
 800264e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002652:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002656:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002658:	fab3 f383 	clz	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002660:	d802      	bhi.n	8002668 <HAL_RCC_OscConfig+0xdd8>
 8002662:	4b7e      	ldr	r3, [pc, #504]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e027      	b.n	80026b8 <HAL_RCC_OscConfig+0xe28>
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002696:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	4b69      	ldr	r3, [pc, #420]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80026c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026c4:	6011      	str	r1, [r2, #0]
 80026c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fa92 f1a2 	rbit	r1, r2
 80026d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026dc:	6011      	str	r1, [r2, #0]
  return result;
 80026de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f042 0220 	orr.w	r2, r2, #32
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f002 021f 	and.w	r2, r2, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d087      	beq.n	8002614 <HAL_RCC_OscConfig+0xd84>
 8002704:	e0ca      	b.n	800289c <HAL_RCC_OscConfig+0x100c>
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800270e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800272a:	601a      	str	r2, [r3, #0]
  return result;
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002734:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002740:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	461a      	mov	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fbd0 	bl	8000ef0 <HAL_GetTick>
 8002750:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e009      	b.n	800276a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe fbcb 	bl	8000ef0 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e099      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002772:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800278e:	601a      	str	r2, [r3, #0]
  return result;
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a2:	d802      	bhi.n	80027aa <HAL_RCC_OscConfig+0xf1a>
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	e027      	b.n	80027fa <HAL_RCC_OscConfig+0xf6a>
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_OscConfig+0xfcc>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002802:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002806:	6011      	str	r1, [r2, #0]
 8002808:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	fa92 f1a2 	rbit	r1, r2
 8002816:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800281a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800281e:	6011      	str	r1, [r2, #0]
  return result;
 8002820:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002824:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	fab2 f282 	clz	r2, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f002 021f 	and.w	r2, r2, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d187      	bne.n	8002756 <HAL_RCC_OscConfig+0xec6>
 8002846:	e029      	b.n	800289c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d103      	bne.n	8002860 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e020      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
 800285c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_OscConfig+0x1018>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002868:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800286c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	429a      	cmp	r2, r3
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002880:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002884:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b09e      	sub	sp, #120	@ 0x78
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e154      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b89      	ldr	r3, [pc, #548]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b86      	ldr	r3, [pc, #536]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4984      	ldr	r1, [pc, #528]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b82      	ldr	r3, [pc, #520]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e13c      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b7b      	ldr	r3, [pc, #492]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4978      	ldr	r1, [pc, #480]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80cd 	beq.w	8002aba <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d137      	bne.n	8002998 <HAL_RCC_ClockConfig+0xec>
 8002928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800292c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002940:	d802      	bhi.n	8002948 <HAL_RCC_ClockConfig+0x9c>
 8002942:	4b6b      	ldr	r3, [pc, #428]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e00f      	b.n	8002968 <HAL_RCC_ClockConfig+0xbc>
 8002948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	667b      	str	r3, [r7, #100]	@ 0x64
 8002956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800295a:	663b      	str	r3, [r7, #96]	@ 0x60
 800295c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002964:	4b62      	ldr	r3, [pc, #392]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800296c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800296e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002970:	fa92 f2a2 	rbit	r2, r2
 8002974:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002976:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	f002 021f 	and.w	r2, r2, #31
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d171      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0ea      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d137      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x164>
 80029a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80029b8:	d802      	bhi.n	80029c0 <HAL_RCC_ClockConfig+0x114>
 80029ba:	4b4d      	ldr	r3, [pc, #308]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e00f      	b.n	80029e0 <HAL_RCC_ClockConfig+0x134>
 80029c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80029d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029dc:	4b44      	ldr	r3, [pc, #272]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029e8:	fa92 f2a2 	rbit	r2, r2
 80029ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d135      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0ae      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
 8002a10:	2302      	movs	r3, #2
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a26:	d802      	bhi.n	8002a2e <HAL_RCC_ClockConfig+0x182>
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e00d      	b.n	8002a4a <HAL_RCC_ClockConfig+0x19e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	61ba      	str	r2, [r7, #24]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	fa92 f2a2 	rbit	r2, r2
 8002a54:	617a      	str	r2, [r7, #20]
  return result;
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f002 021f 	and.w	r2, r2, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e07a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a78:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 0203 	bic.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	491a      	ldr	r1, [pc, #104]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fa31 	bl	8000ef0 <HAL_GetTick>
 8002a8e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a92:	f7fe fa2d 	bl	8000ef0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e062      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 020c 	and.w	r2, r3, #12
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d1eb      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d215      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 0207 	bic.w	r2, r3, #7
 8002ad0:	4906      	ldr	r1, [pc, #24]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <HAL_RCC_ClockConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d006      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e041      	b.n	8002b6e <HAL_RCC_ClockConfig+0x2c2>
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_RCC_ClockConfig+0x2cc>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	491a      	ldr	r1, [pc, #104]	@ (8002b78 <HAL_RCC_ClockConfig+0x2cc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1e:	4b16      	ldr	r3, [pc, #88]	@ (8002b78 <HAL_RCC_ClockConfig+0x2cc>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4912      	ldr	r1, [pc, #72]	@ (8002b78 <HAL_RCC_ClockConfig+0x2cc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b32:	f000 f829 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b36:	4601      	mov	r1, r0
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <HAL_RCC_ClockConfig+0x2cc>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b40:	22f0      	movs	r2, #240	@ 0xf0
 8002b42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	40d3      	lsrs	r3, r2
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x2d0>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5e:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <HAL_RCC_ClockConfig+0x2d4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_RCC_ClockConfig+0x2d8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f97e 	bl	8000e68 <HAL_InitTick>
  
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3778      	adds	r7, #120	@ 0x78
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08004548 	.word	0x08004548
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x36>
 8002bb6:	e026      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bba:	613b      	str	r3, [r7, #16]
      break;
 8002bbc:	e026      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002be4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e004      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	613b      	str	r3, [r7, #16]
      break;
 8002c04:	e002      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c08:	613b      	str	r3, [r7, #16]
      break;
 8002c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0c:	693b      	ldr	r3, [r7, #16]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	007a1200 	.word	0x007a1200
 8002c24:	08004560 	.word	0x08004560
 8002c28:	08004570 	.word	0x08004570
 8002c2c:	003d0900 	.word	0x003d0900

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c4e:	f7ff ffef 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c52:	4601      	mov	r1, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c5c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	fa92 f2a2 	rbit	r2, r2
 8002c68:	603a      	str	r2, [r7, #0]
  return result;
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	fab2 f282 	clz	r2, r2
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	40d3      	lsrs	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08004558 	.word	0x08004558

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c92:	f7ff ffcd 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ca0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	fa92 f2a2 	rbit	r2, r2
 8002cac:	603a      	str	r2, [r7, #0]
  return result;
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	40d3      	lsrs	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08004558 	.word	0x08004558

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b092      	sub	sp, #72	@ 0x48
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80cb 	beq.w	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf4:	4b85      	ldr	r3, [pc, #532]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10e      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b82      	ldr	r3, [pc, #520]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4a81      	ldr	r2, [pc, #516]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	61d3      	str	r3, [r2, #28]
 8002d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b79      	ldr	r3, [pc, #484]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a78      	ldr	r2, [pc, #480]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fe f8db 	bl	8000ef0 <HAL_GetTick>
 8002d3a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe f8d7 	bl	8000ef0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	@ 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0d9      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b6f      	ldr	r3, [pc, #444]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07b      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d074      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7a:	4b64      	ldr	r3, [pc, #400]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b54      	ldr	r3, [pc, #336]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d043      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f888 	bl	8000ef0 <HAL_GetTick>
 8002de0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe f884 	bl	8000ef0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e084      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	2302      	movs	r3, #2
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	61fb      	str	r3, [r7, #28]
  return result;
 8002e12:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e24:	4b39      	ldr	r3, [pc, #228]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	e007      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4b35      	ldr	r3, [pc, #212]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	613a      	str	r2, [r7, #16]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	fa92 f2a2 	rbit	r2, r2
 8002e44:	60fa      	str	r2, [r7, #12]
  return result;
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0bf      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e64:	4b29      	ldr	r3, [pc, #164]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4926      	ldr	r1, [pc, #152]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b23      	ldr	r3, [pc, #140]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a22      	ldr	r2, [pc, #136]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e96:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	491a      	ldr	r1, [pc, #104]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb4:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	f023 0210 	bic.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4912      	ldr	r1, [pc, #72]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	490b      	ldr	r1, [pc, #44]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3748      	adds	r7, #72	@ 0x48
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
 8002f14:	10908100 	.word	0x10908100

08002f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e049      	b.n	8002fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fdb0 	bl	8000aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f000 fa74 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e049      	b.n	800306c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f841 	bl	8003074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fa1d 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0ff      	b.n	80032a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b14      	cmp	r3, #20
 80030b2:	f200 80f0 	bhi.w	8003296 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030b6:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	08003111 	.word	0x08003111
 80030c0:	08003297 	.word	0x08003297
 80030c4:	08003297 	.word	0x08003297
 80030c8:	08003297 	.word	0x08003297
 80030cc:	08003151 	.word	0x08003151
 80030d0:	08003297 	.word	0x08003297
 80030d4:	08003297 	.word	0x08003297
 80030d8:	08003297 	.word	0x08003297
 80030dc:	08003193 	.word	0x08003193
 80030e0:	08003297 	.word	0x08003297
 80030e4:	08003297 	.word	0x08003297
 80030e8:	08003297 	.word	0x08003297
 80030ec:	080031d3 	.word	0x080031d3
 80030f0:	08003297 	.word	0x08003297
 80030f4:	08003297 	.word	0x08003297
 80030f8:	08003297 	.word	0x08003297
 80030fc:	08003215 	.word	0x08003215
 8003100:	08003297 	.word	0x08003297
 8003104:	08003297 	.word	0x08003297
 8003108:	08003297 	.word	0x08003297
 800310c:	08003255 	.word	0x08003255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa18 	bl	800354c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
      break;
 800314e:	e0a5      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa7e 	bl	8003658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
      break;
 8003190:	e084      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fadd 	bl	8003758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0204 	bic.w	r2, r2, #4
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
      break;
 80031d0:	e064      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fb3b 	bl	8003854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
      break;
 8003212:	e043      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb7e 	bl	800391c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0204 	bic.w	r2, r2, #4
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003252:	e023      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fbbc 	bl	80039d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800326e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003294:	e002      	b.n	800329c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
      break;
 800329a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_ConfigClockSource+0x1c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0b6      	b.n	800343a <HAL_TIM_ConfigClockSource+0x18a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003308:	d03e      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0xd8>
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	f200 8087 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003316:	f000 8086 	beq.w	8003426 <HAL_TIM_ConfigClockSource+0x176>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331e:	d87f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003320:	2b70      	cmp	r3, #112	@ 0x70
 8003322:	d01a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xaa>
 8003324:	2b70      	cmp	r3, #112	@ 0x70
 8003326:	d87b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003328:	2b60      	cmp	r3, #96	@ 0x60
 800332a:	d050      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x11e>
 800332c:	2b60      	cmp	r3, #96	@ 0x60
 800332e:	d877      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003330:	2b50      	cmp	r3, #80	@ 0x50
 8003332:	d03c      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xfe>
 8003334:	2b50      	cmp	r3, #80	@ 0x50
 8003336:	d873      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d058      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x13e>
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d86f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003340:	2b30      	cmp	r3, #48	@ 0x30
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15e>
 8003344:	2b30      	cmp	r3, #48	@ 0x30
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15e>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d867      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15e>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05a      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x15e>
 8003358:	e062      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	f000 fc0f 	bl	8003b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800337c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e04f      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	f000 fbf8 	bl	8003b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fb6c 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	@ 0x50
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fbc5 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 fb8b 	bl	8003af6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	@ 0x60
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fbb5 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 fb4c 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	@ 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fba5 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 800340c:	e00c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fb9c 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 800341e:	e003      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e000      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a38      	ldr	r2, [pc, #224]	@ (8003538 <TIM_Base_SetConfig+0xf4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_Base_SetConfig+0x28>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0x28>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a35      	ldr	r2, [pc, #212]	@ (800353c <TIM_Base_SetConfig+0xf8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <TIM_Base_SetConfig+0xf4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <TIM_Base_SetConfig+0x6a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348c:	d00f      	beq.n	80034ae <TIM_Base_SetConfig+0x6a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2a      	ldr	r2, [pc, #168]	@ (800353c <TIM_Base_SetConfig+0xf8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00b      	beq.n	80034ae <TIM_Base_SetConfig+0x6a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a29      	ldr	r2, [pc, #164]	@ (8003540 <TIM_Base_SetConfig+0xfc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <TIM_Base_SetConfig+0x6a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a28      	ldr	r2, [pc, #160]	@ (8003544 <TIM_Base_SetConfig+0x100>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x6a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a27      	ldr	r2, [pc, #156]	@ (8003548 <TIM_Base_SetConfig+0x104>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a14      	ldr	r2, [pc, #80]	@ (8003538 <TIM_Base_SetConfig+0xf4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00b      	beq.n	8003504 <TIM_Base_SetConfig+0xc0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a14      	ldr	r2, [pc, #80]	@ (8003540 <TIM_Base_SetConfig+0xfc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d007      	beq.n	8003504 <TIM_Base_SetConfig+0xc0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <TIM_Base_SetConfig+0x100>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xc0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <TIM_Base_SetConfig+0x104>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]
  }
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40014000 	.word	0x40014000
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800

0800354c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f023 0201 	bic.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 0302 	bic.w	r3, r3, #2
 8003598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a28      	ldr	r2, [pc, #160]	@ (8003648 <TIM_OC1_SetConfig+0xfc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_OC1_SetConfig+0x78>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a27      	ldr	r2, [pc, #156]	@ (800364c <TIM_OC1_SetConfig+0x100>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_OC1_SetConfig+0x78>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a26      	ldr	r2, [pc, #152]	@ (8003650 <TIM_OC1_SetConfig+0x104>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC1_SetConfig+0x78>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a25      	ldr	r2, [pc, #148]	@ (8003654 <TIM_OC1_SetConfig+0x108>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10c      	bne.n	80035de <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0308 	bic.w	r3, r3, #8
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a19      	ldr	r2, [pc, #100]	@ (8003648 <TIM_OC1_SetConfig+0xfc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_OC1_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a18      	ldr	r2, [pc, #96]	@ (800364c <TIM_OC1_SetConfig+0x100>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_OC1_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <TIM_OC1_SetConfig+0x104>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_OC1_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <TIM_OC1_SetConfig+0x108>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d111      	bne.n	8003622 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40014000 	.word	0x40014000
 8003650:	40014400 	.word	0x40014400
 8003654:	40014800 	.word	0x40014800

08003658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f023 0210 	bic.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a24      	ldr	r2, [pc, #144]	@ (8003748 <TIM_OC2_SetConfig+0xf0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d10d      	bne.n	80036d8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1b      	ldr	r2, [pc, #108]	@ (8003748 <TIM_OC2_SetConfig+0xf0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00b      	beq.n	80036f8 <TIM_OC2_SetConfig+0xa0>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1a      	ldr	r2, [pc, #104]	@ (800374c <TIM_OC2_SetConfig+0xf4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d007      	beq.n	80036f8 <TIM_OC2_SetConfig+0xa0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a19      	ldr	r2, [pc, #100]	@ (8003750 <TIM_OC2_SetConfig+0xf8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_OC2_SetConfig+0xa0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a18      	ldr	r2, [pc, #96]	@ (8003754 <TIM_OC2_SetConfig+0xfc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d113      	bne.n	8003720 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003706:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40014000 	.word	0x40014000
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800

08003758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a23      	ldr	r2, [pc, #140]	@ (8003844 <TIM_OC3_SetConfig+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003844 <TIM_OC3_SetConfig+0xec>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_OC3_SetConfig+0x9e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <TIM_OC3_SetConfig+0xf0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_OC3_SetConfig+0x9e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a18      	ldr	r2, [pc, #96]	@ (800384c <TIM_OC3_SetConfig+0xf4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_OC3_SetConfig+0x9e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <TIM_OC3_SetConfig+0xf8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d113      	bne.n	800381e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	621a      	str	r2, [r3, #32]
}
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800388e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a16      	ldr	r2, [pc, #88]	@ (800390c <TIM_OC4_SetConfig+0xb8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_OC4_SetConfig+0x7c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <TIM_OC4_SetConfig+0xbc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_OC4_SetConfig+0x7c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <TIM_OC4_SetConfig+0xc0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_OC4_SetConfig+0x7c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a13      	ldr	r2, [pc, #76]	@ (8003918 <TIM_OC4_SetConfig+0xc4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d109      	bne.n	80038e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <TIM_OC5_SetConfig+0xac>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_OC5_SetConfig+0x72>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a14      	ldr	r2, [pc, #80]	@ (80039cc <TIM_OC5_SetConfig+0xb0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_OC5_SetConfig+0x72>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <TIM_OC5_SetConfig+0xb4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_OC5_SetConfig+0x72>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <TIM_OC5_SetConfig+0xb8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d109      	bne.n	80039a2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003994:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800

080039d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	051b      	lsls	r3, r3, #20
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	@ (8003a88 <TIM_OC6_SetConfig+0xb0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_OC6_SetConfig+0x74>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a15      	ldr	r2, [pc, #84]	@ (8003a8c <TIM_OC6_SetConfig+0xb4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC6_SetConfig+0x74>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <TIM_OC6_SetConfig+0xb8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC6_SetConfig+0x74>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <TIM_OC6_SetConfig+0xbc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	029b      	lsls	r3, r3, #10
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0201 	bic.w	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 030a 	bic.w	r3, r3, #10
 8003ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 0210 	bic.w	r2, r3, #16
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	031b      	lsls	r3, r3, #12
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f043 0307 	orr.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e054      	b.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d108      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a13      	ldr	r2, [pc, #76]	@ (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10c      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40014000 	.word	0x40014000

08003ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e060      	b.n	8003d86 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a14      	ldr	r2, [pc, #80]	@ (8003d94 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d115      	bne.n	8003d74 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	051b      	lsls	r3, r3, #20
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00

08003d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e040      	b.n	8003e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc ff8e 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	@ 0x24
 8003dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f95e 	bl	80040a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f825 	bl	8003e34 <UART_SetConfig>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e01b      	b.n	8003e2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f9dd 	bl	80041e4 <UART_CheckIdleState>
 8003e2a:	4603      	mov	r3, r0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8004088 <UART_SetConfig+0x254>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a78      	ldr	r2, [pc, #480]	@ (800408c <UART_SetConfig+0x258>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d120      	bne.n	8003ef2 <UART_SetConfig+0xbe>
 8003eb0:	4b77      	ldr	r3, [pc, #476]	@ (8004090 <UART_SetConfig+0x25c>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d817      	bhi.n	8003eec <UART_SetConfig+0xb8>
 8003ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec4 <UART_SetConfig+0x90>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003ee7 	.word	0x08003ee7
 8003ed0:	08003edb 	.word	0x08003edb
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e01d      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e01a      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e017      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e014      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e011      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a67      	ldr	r2, [pc, #412]	@ (8004094 <UART_SetConfig+0x260>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d102      	bne.n	8003f02 <UART_SetConfig+0xce>
 8003efc:	2300      	movs	r3, #0
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e009      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a64      	ldr	r2, [pc, #400]	@ (8004098 <UART_SetConfig+0x264>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <UART_SetConfig+0xde>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e001      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003f12:	2310      	movs	r3, #16
 8003f14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1e:	d15a      	bne.n	8003fd6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f20:	7ffb      	ldrb	r3, [r7, #31]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d827      	bhi.n	8003f76 <UART_SetConfig+0x142>
 8003f26:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <UART_SetConfig+0xf8>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f77 	.word	0x08003f77
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003f77 	.word	0x08003f77
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f6f 	.word	0x08003f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe fe7a 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61b8      	str	r0, [r7, #24]
        break;
 8003f56:	e013      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7fe fe98 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8003f5c:	61b8      	str	r0, [r7, #24]
        break;
 8003f5e:	e00f      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b4e      	ldr	r3, [pc, #312]	@ (800409c <UART_SetConfig+0x268>)
 8003f62:	61bb      	str	r3, [r7, #24]
        break;
 8003f64:	e00c      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7fe fe0f 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8003f6a:	61b8      	str	r0, [r7, #24]
        break;
 8003f6c:	e008      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f72:	61bb      	str	r3, [r7, #24]
        break;
 8003f74:	e004      	b.n	8003f80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d074      	beq.n	8004070 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	005a      	lsls	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d916      	bls.n	8003fd0 <UART_SetConfig+0x19c>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa8:	d212      	bcs.n	8003fd0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f023 030f 	bic.w	r3, r3, #15
 8003fb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	89fa      	ldrh	r2, [r7, #14]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	e04f      	b.n	8004070 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	77bb      	strb	r3, [r7, #30]
 8003fd4:	e04c      	b.n	8004070 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d828      	bhi.n	800402e <UART_SetConfig+0x1fa>
 8003fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe4 <UART_SetConfig+0x1b0>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	08004011 	.word	0x08004011
 8003fec:	08004019 	.word	0x08004019
 8003ff0:	0800402f 	.word	0x0800402f
 8003ff4:	0800401f 	.word	0x0800401f
 8003ff8:	0800402f 	.word	0x0800402f
 8003ffc:	0800402f 	.word	0x0800402f
 8004000:	0800402f 	.word	0x0800402f
 8004004:	08004027 	.word	0x08004027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe fe1e 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 800400c:	61b8      	str	r0, [r7, #24]
        break;
 800400e:	e013      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004010:	f7fe fe3c 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8004014:	61b8      	str	r0, [r7, #24]
        break;
 8004016:	e00f      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004018:	4b20      	ldr	r3, [pc, #128]	@ (800409c <UART_SetConfig+0x268>)
 800401a:	61bb      	str	r3, [r7, #24]
        break;
 800401c:	e00c      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401e:	f7fe fdb3 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004022:	61b8      	str	r0, [r7, #24]
        break;
 8004024:	e008      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e004      	b.n	8004038 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	77bb      	strb	r3, [r7, #30]
        break;
 8004036:	bf00      	nop
    }

    if (pclk != 0U)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	085a      	lsrs	r2, r3, #1
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d909      	bls.n	800406c <UART_SetConfig+0x238>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405e:	d205      	bcs.n	800406c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	e001      	b.n	8004070 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800407c:	7fbb      	ldrb	r3, [r7, #30]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40013800 	.word	0x40013800
 8004090:	40021000 	.word	0x40021000
 8004094:	40004400 	.word	0x40004400
 8004098:	40004800 	.word	0x40004800
 800409c:	007a1200 	.word	0x007a1200

080040a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419e:	d10a      	bne.n	80041b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b098      	sub	sp, #96	@ 0x60
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f4:	f7fc fe7c 	bl	8000ef0 <HAL_GetTick>
 80041f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d12e      	bne.n	8004266 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f88c 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d021      	beq.n	8004266 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004236:	653b      	str	r3, [r7, #80]	@ 0x50
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	647b      	str	r3, [r7, #68]	@ 0x44
 8004242:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e062      	b.n	800432c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d149      	bne.n	8004308 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004274:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f856 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03c      	beq.n	8004308 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	623b      	str	r3, [r7, #32]
   return(result);
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e6      	bne.n	800428e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	69b9      	ldr	r1, [r7, #24]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	617b      	str	r3, [r7, #20]
   return(result);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e011      	b.n	800432c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3758      	adds	r7, #88	@ 0x58
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004344:	e04f      	b.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d04b      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fc fdcf 	bl	8000ef0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <UART_WaitOnFlagUntilTimeout+0x30>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e04e      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d037      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b80      	cmp	r3, #128	@ 0x80
 800437a:	d034      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d031      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d110      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2208      	movs	r2, #8
 8004396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f838 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2208      	movs	r2, #8
 80043a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e029      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c0:	d111      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f81e 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e00f      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d0a0      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440e:	b480      	push	{r7}
 8004410:	b095      	sub	sp, #84	@ 0x54
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004434:	643b      	str	r3, [r7, #64]	@ 0x40
 8004436:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800443a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e6      	bne.n	8004416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	61fb      	str	r3, [r7, #28]
   return(result);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3308      	adds	r3, #8
 8004466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004468:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800446a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800446e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004480:	2b01      	cmp	r3, #1
 8004482:	d118      	bne.n	80044b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	60bb      	str	r3, [r7, #8]
   return(result);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f023 0310 	bic.w	r3, r3, #16
 8004498:	647b      	str	r3, [r7, #68]	@ 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6979      	ldr	r1, [r7, #20]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	613b      	str	r3, [r7, #16]
   return(result);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e6      	bne.n	8004484 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044ca:	bf00      	nop
 80044cc:	3754      	adds	r7, #84	@ 0x54
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <memset>:
 80044d6:	4402      	add	r2, r0
 80044d8:	4603      	mov	r3, r0
 80044da:	4293      	cmp	r3, r2
 80044dc:	d100      	bne.n	80044e0 <memset+0xa>
 80044de:	4770      	bx	lr
 80044e0:	f803 1b01 	strb.w	r1, [r3], #1
 80044e4:	e7f9      	b.n	80044da <memset+0x4>
	...

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	@ (800452c <__libc_init_array+0x44>)
 80044fc:	f000 f818 	bl	8004530 <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	08004580 	.word	0x08004580
 8004524:	08004580 	.word	0x08004580
 8004528:	08004580 	.word	0x08004580
 800452c:	08004584 	.word	0x08004584

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
